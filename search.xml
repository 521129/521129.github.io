<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>👴🏿CSS选择器详解及权重</title>
      <link href="2021/03/22/css-xuan-ze-qi-xiang-jie-ji-quan-chong/"/>
      <url>2021/03/22/css-xuan-ze-qi-xiang-jie-ji-quan-chong/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="-1"><a href="#-1" class="headerlink" title=""></a><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/gif/510079/1616385718065-1509deee-8d2f-447d-b582-469a0ee47c80.gif#align=left&display=inline&height=250&margin=%5Bobject%20Object%5D&name=1.gif&originHeight=250&originWidth=312&size=226098&status=done&style=none&width=312" alt="1.gif"></h1><h1 id="一，选择器的详解"><a href="#一，选择器的详解" class="headerlink" title="一，选择器的详解"></a>一，选择器的详解</h1><p><strong>1.标签选择器（元素选择器）：</strong><br>通过HTML的标签作为选择器，作用于选取的HTML文档相同的HTML元素。<br>如：p{}；<br><em><strong>————————————————————————————————————————</strong></em><br><strong>2.类选择器：</strong><br>第一步：设置类名&lt;开始标签 class = “类名”&gt;&lt;/结束标签&gt;<br>第二步：为类设置样式    .类名{};<br>注意：<br><em>1.同一文档中的类名可以相同。</em><br><em>2.class后面可以设置有很多值，用空格分开。</em><br><em>————————————————————————————————————————</em><br><strong>3.id选择器：</strong><br>第一步：设置id名&lt;开始标签  id=”类名”&gt;&lt;/结束标签&gt;<br>第二步：设置样式    #ID名字{}；<br><strong>注意：</strong><br><em>1.同一文档中，id名必须唯一。</em><br><em>2.id的权重大于class。</em><strong>————————————————————————————————————————</strong>_<br>*<em>4.全局选择器（通配符选择器）：******</em>，选取文档中的所有元素。<br><em><strong>————————————————————————————————————————</strong></em><br><strong>5.群组选择器：</strong><br>将多个选择器用逗号连在一起，形成一个组，使他们应用同样的样式。<br>如：p，h1{}；<br><em><strong>————————————————————————————————————————</strong></em><br><strong>6.伪类选择器：</strong><br>1.  :link      设置超链接的默认效果<br>2.  :visited    设置超链接被访问过后的样式<br>3.  :hover     设置元素被鼠标滑过的样式<br>4.  :active      设置元素被激活时的样式<br>5.  :focus      设置元素获得输入焦点时的样式<em><strong>————————————————————————————————————————</strong></em><br><strong>7.后代选择器：</strong><br>用来选择一个元素的所有后代元素，选择器间用空格分隔。<br>如:div p{}；<br><em><strong>————————————————————————————————————————</strong></em><br><strong>8.子代选择器：</strong><br>用来选择一个元素的子代元素，两个选择器间用&gt;分隔。<br>如：div&gt;p{};<br><em><strong>————————————————————————————————————————</strong></em><br><strong>9.属性选择器：</strong><br>通过元素的属性或者属性值来获取元素。</p><ol><li>a.[属性名]{样式}      选取具有某个属性的所有元素</li><li>b.匹配元素[属性名]{样式}    选取具有某个属性且匹配前面的“匹配元素”的所有元素</li><li>c.[属性名1][属性名2]{样式}  选取具有多个属性的所有元素</li><li>e.[属性名=”属性值”]{样式}       选取具有某个属性且具有指定属性值的所有元素</li><li>f.[属性名~=”属性值1  属性值2  属性值3…”]   选取具有某个属性且包含 某个属性值的所有元素</li><li>g.[属性名|=”属性值”]    选取具有某个属性，且其属性值以某些字符串作为前缀，或属性值为该字符串，如</li><li>   <p title="a-1">测试1</p></li><li>   <p title="a">测试2</p></li><li>   [title|=”a”]{}，会选取到测试1和测试2</li><li>h.[属性名^=”字符串”]    选取具有某个属性，且属性值以某些字符开头的所有元素</li><li>i.[属性名$=”字符串”]   选取具有某个属性，且属性值以某些字符串做结尾的所有元素</li><li>j.[属性名*=”字符串”]    选取具有某个属性，且属性值中包含指定字符串的所有元素</li></ol><p><em><strong>————————————————————————————————————————</strong></em><br><strong>10.交集选择器：</strong><br>将两个选择器紧挨着写在一起，作用是选择这两个选择器的交集部分，格式有三种。<br>1.a.标签选择器.类名<br>2.b.标签选择器#id名<br>3.c.标签选择器[属性名=”属性值”]<br><em><strong>————————————————————————————————————————</strong></em><br><strong>11.结构为类选择器：</strong><br>用于选取一个结构的某个元素。</p><ol><li>:first-child           选取结构中第一个元素</li><li>父元素  :first-child       选取某个结构中的第一个元素</li><li>父元素  匹配对象:first-child       选取某个机构中的第一个元素，且这个元素必须和匹配对象向匹配</li><li>:last-child        选取结构中最后一个元素</li><li>:nth-child(n)          选取结构中第n个元素</li><li>:nth-last-child(n)        选取结构中倒数第n个元素</li><li>元素类型:nth-of-type(n)       按类别查找结构中的第n个元素</li><li>元素类型：nth-last-of-type(n)     按类型在结构中查找倒数第n个元素</li><li>元素类型：first-of-type        按类型查找结构中第一个符合某种类型的元素</li><li>元素类型：last-of-type         按类型查找结构中最后一个符合某种类型的元素</li></ol><p><em><strong>————————————————————————————————————————</strong></em><br>**12.伪元素选择器：</p><ol><li>:first-letter   选取一个元素的第一个字符  </li><li>:first-line 选取一个元素的第一行内容</li><li>:before     在一个元素前面插入相应内容，常和content结合使用</li><li>:after      在一个元素后面插入内容，常和content结合使用</li></ol><p><strong>注意:</strong><br><em>:first-line</em><br><em>:first-letter</em><br><em>这两个选择器的应用对象是块级元素</em><br><em><strong>————————————————————————————————————————</strong></em><br><strong>13.Ui选择器：</strong></p><ol><li>:enabled     选取界面中的可用元素</li><li>:disabled    选择界面中不可用元素</li></ol><p><em><strong>————————————————————————————————————————</strong></em><br><strong>14.通用兄弟元素选择器：</strong></p><ol><li>选择器1<del>选择器2     选取的是选择器1后面的所有选择器2，如div</del>p，选取的是div后面的所有p元素</li><li>选择器1+选择器2     选取的是选择器1后面的第一个选择器2元素，如div+p，选取的是div后面的第一个p元素</li><li>:root   选取文档的根元素，即<html>标签</li><li>:empty  选取文档中的空元素（所谓空元素，就是指该元素中连文本性信息都没有）</li><li>:not(被否定的元素)   否定伪类选择器，用来排除某些元素</li></ol><p>  6:target   选取文档中具有锚点的元素，当超链接被激活时发挥作用<br><em><strong>————————————————————————————————————————<img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/jpeg/510079/1616385757947-71bc02a2-6023-4753-8e87-23ecd4ed3c60.jpeg#align=left&display=inline&height=300&margin=%5Bobject%20Object%5D&name=1%20%2813%29.jpeg&originHeight=300&originWidth=300&size=9728&status=done&style=none&width=300" alt="1 (13).jpeg"></strong></em></p><h1 id="二，选择器的权重问题"><a href="#二，选择器的权重问题" class="headerlink" title="二，选择器的权重问题"></a>二，选择器的权重问题</h1><ol><li>标签选择器的权重为0001</li><li>class选择器的权重为0010</li><li>id选择器的权重为0100</li><li>属性选择器的权重为0010</li><li>伪类选择器的权重为0010</li><li>伪元素选择器的权重为0010</li><li>包含选择器的权重：所包含选择器的权重之和</li><li>子选择器的权重：所包含选择器的权重之和</li><li>交集选择器权重为选择器之和</li><li>继承样式的权重为0000</li><li>行内样式的权重为1000<img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/jpeg/510079/1616385786438-f03ddb2f-1a13-4b7a-817d-626729971a92.jpeg#align=left&display=inline&height=240&margin=%5Bobject%20Object%5D&name=%E4%B8%AD%E4%BA%8C%E9%9D%92%E5%B9%B4%F0%9F%90%B1_%F0%9F%91%93%20%281%29.jpeg&originHeight=240&originWidth=240&size=17156&status=done&style=none&width=240" alt="中二青年🐱_👓 (1).jpeg"></li></ol>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🎈CSS样式----浮动</title>
      <link href="2021/03/22/css-yang-shi-fu-dong/"/>
      <url>2021/03/22/css-yang-shi-fu-dong/</url>
      
        <content type="html"><![CDATA[<p><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/jpeg/510079/1615994560128-4ecb8031-54e2-4714-9069-3839a60127f1.jpeg#align=left&display=inline&height=225&margin=%5Bobject%20Object%5D&name=1%20%282%29.jpeg&originHeight=225&originWidth=400&size=6728&status=done&style=none&width=400" alt="1 (2).jpeg"></p><h3 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h3><ul><li>标准文档流</li><li>浮动的性质</li><li>浮动的清楚<h3 id="标准文档流"><a href="#标准文档流" class="headerlink" title="标准文档流"></a>标准文档流</h3>宏观的讲，我们的web页面和Photoshop等设计软件有本质的区别：文本页面的制作，是个“流”，必须从上而下，像“织毛衣”。而设计软件，像往哪里画个东西，都能画。<h4 id="标准文档流的特性"><a href="#标准文档流的特性" class="headerlink" title="标准文档流的特性"></a>标准文档流的特性</h4><h6 id="1-空白折叠现象："><a href="#1-空白折叠现象：" class="headerlink" title="1.空白折叠现象："></a>1.空白折叠现象：</h6>无论多少个空格、换行、tab，都会折叠为一个空格。<br>比如，如果我们想让img标签之间没有空隙，必须紧密连接：<br><code>&lt;img src=&quot;img/1.png&quot; /&gt;&lt;img src=&quot;img/2.png&quot; /&gt;&lt;img src=&quot;img/3.png&quot; /&gt;</code><h6 id="2-高矮不齐，底边对齐："><a href="#2-高矮不齐，底边对齐：" class="headerlink" title="2.高矮不齐，底边对齐："></a>2.高矮不齐，底边对齐：</h6>举例如下：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615995729754-52202d1a-483e-4bb7-9c38-0109d15103fe.png#align=left&display=inline&height=644&margin=%5Bobject%20Object%5D&originHeight=644&originWidth=780&size=0&status=done&style=none&width=780"></li></ul><h6 id="3-自动换行，一行不满，换行写。"><a href="#3-自动换行，一行不满，换行写。" class="headerlink" title="3.自动换行，一行不满，换行写。"></a>3.自动换行，一行不满，换行写。</h6><h4 id="行内元素和块级元素"><a href="#行内元素和块级元素" class="headerlink" title="行内元素和块级元素"></a>行内元素和块级元素</h4><p>标准文档流等级森严。标签分为两种等级：</p><ul><li><p>行内元素</p></li><li><p>块级元素</p><h4 id="行内元素和块级元素的区别："><a href="#行内元素和块级元素的区别：" class="headerlink" title="行内元素和块级元素的区别："></a>行内元素和块级元素的区别：</h4><p>行内元素：</p></li><li><p>与其他行内元素并排</p></li><li><p>不能设置宽。高。默认的宽度就是文字的宽度。</p></li></ul><p>块级元素：</p><ul><li>霸占一行，不能与其他任何元素并排；</li><li>能接受宽高，如果不设置宽默认变为父亲的100%。<h4 id="行内元素和块级元素的分类："><a href="#行内元素和块级元素的分类：" class="headerlink" title="行内元素和块级元素的分类："></a>行内元素和块级元素的分类：</h4><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615995729758-d3ec2e07-200b-4802-a9cf-eab280d7bb00.png#align=left&display=inline&height=494&margin=%5Bobject%20Object%5D&originHeight=494&originWidth=572&size=0&status=done&style=none&width=572"></li></ul><h4 id="行内元素和块级元素的相互转换："><a href="#行内元素和块级元素的相互转换：" class="headerlink" title="行内元素和块级元素的相互转换："></a>行内元素和块级元素的相互转换：</h4><p>我们可以通过display属性将块级元素和行内元素进行相互转换。display即“显示模式”。</p><h5 id="块级元素可以转换行内元素："><a href="#块级元素可以转换行内元素：" class="headerlink" title="块级元素可以转换行内元素："></a>块级元素可以转换行内元素：</h5><p>如：（给一个div设置）<br>display：inline；<br>此时特和span无异。</p><h5 id="行内元素可以转换块级元素："><a href="#行内元素可以转换块级元素：" class="headerlink" title="行内元素可以转换块级元素："></a>行内元素可以转换块级元素：</h5><p>如：（给一个span设置）<br>display：block；<br>此时特和div无异。</p><p><strong>标准流里面的限制非常多，导致很多页面效果无法实现。如果我们现在就要并排、并且就要设置宽高，那该怎么办呢？办法是：**</strong>移民！**<strong>脱离标准流**</strong>！**<br><strong><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/jpeg/510079/1615996077276-12c4ece7-48e5-41b7-8763-9aae5dfc4e3e.jpeg#align=left&display=inline&height=222&margin=%5Bobject%20Object%5D&name=%E6%88%91%E7%9A%84%E5%A4%A9%E5%91%A2%F0%9F%98%AE%20%286%29.jpeg&originHeight=400&originWidth=400&size=16410&status=done&style=none&width=222" alt="我的天呢😮 (6).jpeg"></strong><br><strong>css中一共有三种手段，使一个元素脱离标准文档流：</strong><br>**</p><ul><li>浮动</li><li>绝定位</li><li>固定定位</li></ul><p>这便引出我们今天要学的内容：浮动🎈</p><h3 id="浮动的特点"><a href="#浮动的特点" class="headerlink" title="浮动的特点"></a>浮动的特点</h3><p>浮动是css里面布局用的最多的属性。<br>现在有两个div，分别设置宽高。我们知道，它们的效果如下：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615996337626-8d1486b8-3c76-47a0-8e0d-7b0837627c2d.png#align=left&display=inline&height=347&margin=%5Bobject%20Object%5D&originHeight=646&originWidth=917&size=0&status=done&style=none&width=492"><br>此时，如果给这两个div增加一个浮动属性，比如<code>float: left;</code>，效果如下：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615996361973-b7b63600-df23-4053-9975-9b9ee66d8fb4.png#align=left&display=inline&height=355&margin=%5Bobject%20Object%5D&originHeight=646&originWidth=901&size=0&status=done&style=none&width=495"><br>这就达到了浮动的效果。此时，两个元素并排了，并且两个元素都能够设置宽度、高度了。<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/gif/510079/1615996442128-f105f10f-679f-4395-adb4-8978cbc032f4.gif#align=left&display=inline&height=135&margin=%5Bobject%20Object%5D&name=%E6%88%91%E7%9A%84%E5%A4%A9%E5%91%A2%F0%9F%98%AE%20%281%29.gif&originHeight=135&originWidth=170&size=115426&status=done&style=none&width=170" alt="我的天呢😮 (1).gif"></p><h3 id="浮动的三个性质："><a href="#浮动的三个性质：" class="headerlink" title="浮动的三个性质："></a>浮动的三个性质：</h3><h4 id="性质1：浮动的元素脱标"><a href="#性质1：浮动的元素脱标" class="headerlink" title="性质1：浮动的元素脱标"></a>性质1：浮动的元素脱标</h4><p>脱标即脱离标准流。我来看一下脱标实例：<br>证明1：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1616070379825-a3f744a9-fbbc-4a92-8686-873cb2982497.png#align=left&display=inline&height=462&margin=%5Bobject%20Object%5D&originHeight=462&originWidth=749&size=0&status=done&style=none&width=749"><br>证明2：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1616070437843-7ffbac33-ae33-44f2-a907-1527a3d0ffdc.png#align=left&display=inline&height=502&margin=%5Bobject%20Object%5D&originHeight=502&originWidth=1019&size=0&status=done&style=none&width=1019"><br>上图中，span标签在标准流中，是不能设置宽高的（因为是行内元素）。但是，一旦设置为浮动之后，即使不转成块级元素，也能够设置宽高了。<br>所以能够证明一件事：<strong>一旦一个元素浮动了，那么，将能够并排了，并且能够设置宽高了。无论它原来是个div还是个span。</strong>所有标签，浮动之后，已经不区分行内、块级了。<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/gif/510079/1616070543088-76e20500-5efb-4805-bd1a-97c57fe34161.gif#align=left&display=inline&height=150&margin=%5Bobject%20Object%5D&name=1.gif&originHeight=150&originWidth=148&size=15960&status=done&style=none&width=148" alt="1.gif"></p><h4 id="性质2：浮动的元素相互贴靠"><a href="#性质2：浮动的元素相互贴靠" class="headerlink" title="性质2：浮动的元素相互贴靠"></a>性质2：浮动的元素相互贴靠</h4><p>给三个div均设置了<code>float: left;</code>属性之后，然后设置宽高。当改变浏览器窗口大小时，可以看到div的贴靠效果：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/gif/510079/1616070630370-bf82d0cd-6a68-42d3-b69e-44033e9b5b4c.gif#align=left&display=inline&height=1292&margin=%5Bobject%20Object%5D&originHeight=1292&originWidth=1180&size=0&status=done&style=none&width=1180"><br>上图显示，3号如果有足够空间，那么就会靠着2号。如果没有足够的空间，那么会靠着1号大哥。<br>如果没有足够的空间靠着1号大哥，3号自己去贴左墙。</p><p><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/gif/510079/1616070704080-ad0dfa1c-d7ca-4efb-a65d-ab08878c473e.gif#align=left&display=inline&height=1276&margin=%5Bobject%20Object%5D&originHeight=1276&originWidth=1060&size=0&status=done&style=none&width=1060"></p><p>上图显示，3号贴左墙的时候，并不会往1号里面挤。<br>同样，float还有一个属性值是<code>right</code>，这个和属性值<code>left</code>是对称的。</p><h4 id="性质3：浮动的元素有“字围”效果"><a href="#性质3：浮动的元素有“字围”效果" class="headerlink" title="性质3：浮动的元素有“字围”效果"></a>性质3：浮动的元素有“字围”效果</h4><p>我们让div浮动，p不浮动。</p><p><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1616070793926-aa1a7e7c-45fe-4fe5-bc1d-e704ef49b335.png#align=left&display=inline&height=696&margin=%5Bobject%20Object%5D&originHeight=696&originWidth=1044&size=0&status=done&style=none&width=1044"><br>上图中，我们发现：<strong>div挡住了p，但不会挡住p中的文字</strong>，形成“字围”效果。<br>总结：<strong>标准流中的文字不会被浮动的盒子遮挡住</strong>。（文字就像水一样）<br>关于浮动我们要强调一点，浮动这个东西，为避免混乱，我们在初期一定要遵循一个原则：<strong>永远不是一个东西单独浮动，浮动都是一起浮动，要浮动，大家都浮动。</strong><br><strong><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/jpeg/510079/1616070862619-889790ea-1547-47f2-a577-3eb7cafc67a8.jpeg#align=left&display=inline&height=300&margin=%5Bobject%20Object%5D&name=%E6%88%91%E7%9A%84%E5%A4%A9%E5%91%A2%F0%9F%98%AE%20%283%29.jpeg&originHeight=300&originWidth=303&size=12634&status=done&style=none&width=303" alt="我的天呢😮 (3).jpeg"></strong></p><h4 id="性质4-收缩"><a href="#性质4-收缩" class="headerlink" title="性质4:收缩"></a>性质4:收缩</h4><p>收缩：一个浮动的元素，如果没有设置width，那么将自动收缩为内容的宽度（这点非常像行内元素）。<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1616070943013-ad271f4e-260e-4f9b-b3ec-f85bc86995f9.png#align=left&display=inline&height=351&margin=%5Bobject%20Object%5D&originHeight=351&originWidth=631&size=0&status=done&style=none&width=631"><br>div本身是块级元素，如果不设置width，它会单独霸占整行；但是，设置div浮动后，它会收缩。、</p><h4 id="浮动的补充（做网站时注意）"><a href="#浮动的补充（做网站时注意）" class="headerlink" title="浮动的补充（做网站时注意）"></a>浮动的补充（做网站时注意）</h4><p><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1616071048365-8d0ac609-dc00-40cd-927d-83770b6cef47.png#align=left&display=inline&height=769&margin=%5Bobject%20Object%5D&originHeight=769&originWidth=913&size=0&status=done&style=none&width=913"><br>上图所示，将para1和para2设置为浮动，它们是div的儿子。此时para1+para2的宽度小于div的宽度。效果如上图所示。可如果设置para1+para2的宽度大于div的宽度，我们会发现，para2掉下来了：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1616071120892-5d66b8e8-6ded-4167-b2c1-fb95fe8a1ece.png#align=left&display=inline&height=737&margin=%5Bobject%20Object%5D&originHeight=737&originWidth=890&size=0&status=done&style=none&width=890"></p><h3 id="浮动的清除"><a href="#浮动的清除" class="headerlink" title="浮动的清除"></a>浮动的清除</h3><p>这里所说的清除浮动，指的是清除浮动与浮动之间的影响。</p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>网页就是通过浮动实现并排的。<br>比如一个网页有header、content、footer这三个部分。就拿content部分举例子。<br>如果content的儿子浮动，但是，这个儿子又是一个全新的标准流，于是儿子的儿子仍然在标准流里。<br>从学习浮动的第一天起，我们就要明白，浮动又开始，就要有清除。</p><p>下面这个例子，有两个块级元素div，div没有任何属性，每个div里有li，效果如下：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1616071567021-e7c4456d-47ff-4587-8d98-403c958a8d45.png#align=left&display=inline&height=682&margin=%5Bobject%20Object%5D&originHeight=682&originWidth=952&size=0&status=done&style=none&width=952"></p><p>上面这个例子很简单。可如果我们给里面的 li 标签加浮动。效果却成了下面这个样子：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1616071623080-fbaf5cd4-6cfe-47d4-ba6a-3414254a02b4.png#align=left&display=inline&height=848&margin=%5Bobject%20Object%5D&originHeight=848&originWidth=975&size=0&status=done&style=none&width=975"></p><p>上图中，我们发现：第二组中的第1个li，去贴靠第一组中的最后一个li了（我们本以为这些li会分成两排）。<br>这便引出我们要讲的：清除浮动的第一种方式。</p><h4 id="方法1：给浮动元素的祖先元素加高度"><a href="#方法1：给浮动元素的祖先元素加高度" class="headerlink" title="方法1：给浮动元素的祖先元素加高度"></a>方法1：给浮动元素的祖先元素加高度</h4><p>造成前言中这个现象的根本原因是：li的<strong>父亲div没有设置高度</strong>，导致这两个div的高度均为0px（我们可以通过网页的审查元素进行查看）。div的高度为零，导致不能给自己浮动的孩子，撑起一个容器。<br>撑不起一个容器，导致自己的孩子没办法在自己的内部进行正确的浮动。<br>现在就算给这个div设置高度，可如果div自己的高度小于孩子的高度，也会出现不正常的现象：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1616071815929-580cdbc2-4829-466b-bb5b-3f6ff9aed284.png#align=left&display=inline&height=877&margin=%5Bobject%20Object%5D&originHeight=877&originWidth=996&size=0&status=done&style=none&width=996"></p><p>给div设置一个正确的合适的高度（至少保证高度大于儿子的高度），就可以看到正确的现象：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1616071848559-c56b6b5e-6bb9-4a5b-b119-c6af926f1bf3.png#align=left&display=inline&height=902&margin=%5Bobject%20Object%5D&originHeight=902&originWidth=664&size=0&status=done&style=none&width=664"></p><p><strong>总结：</strong><br><strong>如果一个元素要浮动，那么它的祖先元素一定要有高度。</strong><br><strong>有高度的盒子，才能关住浮动</strong>。（记住这句过来人的经验之语）</p><h4 id="方法2：clear-both"><a href="#方法2：clear-both" class="headerlink" title="方法2：clear:both;"></a>方法2：clear:both;</h4><p>网页制作中，高度height其实很少出现。为什么？因为能被内容撑高！也就是说，方法1，工作中用得很少。<br>那么，能不能不写height，也把浮动清除了呢？也让浮动之间，互不影响呢？<br>这个时候，我们可以使用<code>clear:both;</code>这个属性。如下：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1616072430720-a2f32485-08a3-4f64-b8a6-2f113eab3f30.png#align=left&display=inline&height=742&margin=%5Bobject%20Object%5D&originHeight=742&originWidth=872&size=0&status=done&style=none&width=872"></p><p>clear就是清除，both指的是左浮动、右浮动都要清除。<code>clear:both</code>的意思就是：<strong>不允许左侧和右侧有浮动对象。</strong><br>这种方法有一个非常大的、致命的问题，<strong>它所在的标签，margin属性失效了。</strong><br>margin失效的本质原因是：上图中的box1和box2，高度为零。<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/jpeg/510079/1616072521480-8437255d-f178-4e94-9c8d-6157fd742176.jpeg#align=left&display=inline&height=300&margin=%5Bobject%20Object%5D&name=%E6%88%91%E7%9A%84%E5%A4%A9%E5%91%A2%F0%9F%98%AE%20%283%29.jpeg&originHeight=300&originWidth=303&size=12634&status=done&style=none&width=303" alt="我的天呢😮 (3).jpeg"></p><h4 id="方法3-：隔墙法"><a href="#方法3-：隔墙法" class="headerlink" title="方法3 ：隔墙法"></a>方法3 ：隔墙法</h4><p>上面这个例子中，为了防止第二个div贴靠到第二个div，我们可以在这两个div中间用一个新的div隔开，然后给这个新的div设置<code>clear: both;</code>属性；同时，既然这个新的div无法设置margin属性，我们可以给它设置height，以达到margin的效果（曲线救国）。这便是隔墙法。<br>我们看看例子效果就知道了：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1616072715775-5111dbd2-ad4e-4f99-9548-53532c3d7639.png#align=left&display=inline&height=776&margin=%5Bobject%20Object%5D&originHeight=776&originWidth=1017&size=0&status=done&style=none&width=1017"></p><h5 id="内墙法："><a href="#内墙法：" class="headerlink" title="内墙法："></a>内墙法：</h5><p><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1616073076849-62466df0-2933-4390-9133-ad344a76acc3.png#align=left&display=inline&height=176&margin=%5Bobject%20Object%5D&originHeight=176&originWidth=722&size=0&status=done&style=none&width=722"><br>上面这个图非常重要，当作内墙法的公式，先记下来。<br>为了讲内墙法，我们先记住一句重要的话：<strong>一个父亲是不能被浮动的儿子撑出高度的</strong>。举例如下：<br>（1）我们在一个div里放一个有宽高的p，效果如下：（很简单）<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1616073108176-9795775a-14c7-4179-bbc2-44c63c200556.png#align=left&display=inline&height=502&margin=%5Bobject%20Object%5D&originHeight=502&originWidth=861&size=0&status=done&style=none&width=861"><br>（2）可如果在此基础之上，给p设置浮动，却发现父亲div没有高度了：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1616073135750-161249b5-de90-4f2f-a23e-1952665a023e.png#align=left&display=inline&height=538&margin=%5Bobject%20Object%5D&originHeight=538&originWidth=911&size=0&status=done&style=none&width=911"><br>（3）此时，我么可以在div的里面放一个div（作为内墙），就可以让父亲div恢复高度：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1616073148328-96bd781e-ba6e-4a29-b3e8-6a140454a81c.png#align=left&display=inline&height=546&margin=%5Bobject%20Object%5D&originHeight=546&originWidth=874&size=0&status=done&style=none&width=874"><br>于是，我们采用内墙法解决前言中的问题：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1616073170330-e4b9885c-d3f3-4b57-b30e-9cd4e0c34991.png#align=left&display=inline&height=697&margin=%5Bobject%20Object%5D&originHeight=697&originWidth=892&size=0&status=done&style=none&width=892"><br>与外墙法相比，内墙法的优势（本质区别）在于：内墙法可以给它所在的家撑出宽度（让box1有高）。即：box1的高度可以自适应内容。<br>而外墙法，虽然一道墙可以把两个div隔开，但是这两个div没有高，也就是说，无法wrap_content。</p><h4 id="方法4：overflow-hidden"><a href="#方法4：overflow-hidden" class="headerlink" title="方法4：overflow:hidden;"></a>方法4：overflow:hidden;</h4><p>属性：<br>overflow:hidden;<br>overflow即“溢出”， hidden即“隐藏”。这个属性的意思是“溢出隐藏”。顾名思义：所有溢出边框的内容，都要隐藏掉。如下：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1616073613595-26b1e666-730c-4392-9559-4cf5bb9c83b8.png#align=left&display=inline&height=432&margin=%5Bobject%20Object%5D&originHeight=432&originWidth=1050&size=0&status=done&style=none&width=1050"></p><p>一个父亲不能被自己浮动的儿子，撑出高度。但是，只要给父亲加上<code>overflow:hidden</code>; 那么，父亲就能被儿子撑出高了。这是一个偏方。<br>举个例子：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1616073652892-992e83fb-001d-4d62-9252-cd6d54021569.png#align=left&display=inline&height=364&margin=%5Bobject%20Object%5D&originHeight=364&originWidth=831&size=0&status=done&style=none&width=831"><br>那么对于前言中的例子，我们同样可以使用这一属性：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1616073713207-aa6c3ab6-550c-483e-9509-48a0345b2478.png#align=left&display=inline&height=733&margin=%5Bobject%20Object%5D&originHeight=733&originWidth=861&size=0&status=done&style=none&width=861"></p><p><strong>四种清楚浮动的方法总结完了，下边总结一下！</strong><br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/gif/510079/1616073939488-40c3b0da-335b-456b-ae24-5ed42a5ec56d.gif#align=left&display=inline&height=300&margin=%5Bobject%20Object%5D&name=1%20%288%29.gif&originHeight=300&originWidth=300&size=392770&status=done&style=none&width=300" alt="1 (8).gif"></p><h3 id="浮动清楚的总结"><a href="#浮动清楚的总结" class="headerlink" title="浮动清楚的总结"></a>浮动清楚的总结</h3><p>浮动的元素，只能被有高度的盒子关住。 也就是说，如果盒子内部有浮动，这个盒子有高，那么妥妥的，浮动不会互相影响。</p><h4 id="1、加高法"><a href="#1、加高法" class="headerlink" title="1、加高法"></a>1、加高法</h4><p>工作上，我们绝对不会给所有的盒子加高度，这是因为麻烦，并且不能适应页面的快速变化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;     <span class="comment">//设置height</span></span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;    <span class="comment">//设置height</span></span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="2、clear-both-法"><a href="#2、clear-both-法" class="headerlink" title="2、clear:both;法"></a>2、clear:both;法</h4><p>最简单的清除浮动的方法，就是给盒子增加clear:both；表示自己的内部元素，不受其他盒子的影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;   <span class="comment">//clear:both;</span></span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>浮动确实被清除了，不会互相影响了。但是有一个问题，就是margin失效。两个div之间，没有任何的间隙了。</strong></p><h4 id="3、隔墙法"><a href="#3、隔墙法" class="headerlink" title="3、隔墙法"></a>3、隔墙法</h4><p>在两部分浮动元素中间，建一个墙。隔开两部分浮动，让后面的浮动元素，不去追前面的浮动元素。<br>墙用自己的身体当做了间隙。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;cl h10&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>我们发现，隔墙法好用，但是第一个div，还是没有高度。如果我们现在想让第一个div，自动根据自己的儿子撑出高度，我们就要想一些“小伎俩”。<br><strong>内墙法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;cl h10&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>内墙法的优点就是，不仅仅能够让后部分的p不去追前部分的p了，并且能把第一个div撑出高度。这样，这个div的背景、边框就能够根据p的高度来撑开了。</p><h4 id="4、overflow-hidden-法"><a href="#4、overflow-hidden-法" class="headerlink" title="4、overflow:hidden;法"></a>4、overflow:hidden;法</h4><p>这个属性的本意，就是将所有溢出盒子的内容，隐藏掉。但是，我们发现这个东西能够用于浮动的清除。<br>我们知道，一个父亲，不能被自己浮动的儿子撑出高度，但是，如果这个父亲加上了overflow:hidden；那么这个父亲就能够被浮动的儿子撑出高度了。这个现象，不能解释，就是浏览器的偏方。<br>并且,overflow:hidden;能够让margin生效。</p><p>【注】：本文来自：博客园，CSDN，掘金以及自己总结和感悟等等。。🐱‍🚀🐱‍👓🐱‍🐉🐱‍💻🐱‍👤🐱‍🏍</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器Linux系统中搭建Java Web环境（一）</title>
      <link href="2021/03/17/a-li-yun-fu-wu-qi-linux-xi-tong-zhong-da-jian-java-web-huan-jing-yi/"/>
      <url>2021/03/17/a-li-yun-fu-wu-qi-linux-xi-tong-zhong-da-jian-java-web-huan-jing-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="一-选择服务器类型"><a href="#一-选择服务器类型" class="headerlink" title="一.选择服务器类型"></a>一.选择服务器类型</h1><h1 id="二-购买服务器"><a href="#二-购买服务器" class="headerlink" title="二.购买服务器"></a>二.购买服务器</h1><h1 id="三-设置实例的密码和启动实例"><a href="#三-设置实例的密码和启动实例" class="headerlink" title="三.设置实例的密码和启动实例"></a>三.设置实例的密码和启动实例</h1><h2 id="1-客户端如何访问阿里云服务器的实例"><a href="#1-客户端如何访问阿里云服务器的实例" class="headerlink" title="1.客户端如何访问阿里云服务器的实例"></a>1.客户端如何访问阿里云服务器的实例</h2><p><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615956980183-9764422e-1030-4a05-9191-25954f5b79ee.png#align=left&display=inline&height=353&margin=%5Bobject%20Object%5D&name=image.png&originHeight=705&originWidth=1286&size=88248&status=done&style=none&width=643" alt="image.png"></p><h2 id="2-设置实例密码"><a href="#2-设置实例密码" class="headerlink" title="2.设置实例密码"></a>2.设置实例密码</h2><h1 id="四-设置安全组合安全规则"><a href="#四-设置安全组合安全规则" class="headerlink" title="四.设置安全组合安全规则"></a>四.设置安全组合安全规则</h1><p><strong>安全组概述</strong>：安全组是一种虚拟防火墙，具备状态检测和数据包过滤能力，用于在云端划分安全域。通 过配置安全组规则，您可以控制安全组内一台或多台ECS实例的入流量和出流量。</p><h3 id="安全组特点"><a href="#安全组特点" class="headerlink" title="安全组特点"></a>安全组特点</h3><p>安全组具有以下功能特点：<br>一台ECS实例至少属于一个安全组，可以同时加入多个安全组。 一个安全组可以管理同一个地域内的多台ECS实例，这些实例要求具有相同安全保护需求并相互信 任。 在没有设置允许访问的安全组规则的情况下，不同安全组内的ECS实例默认内网不通。 同一安全组内的ECS实例之间可以实现内网互通。 （仅普通安全组）可以通过安全组规则授权两个安全组之间互访。 安全组支持有状态应用。一个有状态的会话连接中，会话的最长保持时间是910秒。安全组会默认 放行同一会话中的通信。例如，在会话期内，如果连接的数据包在入方向是允许的，则在出方向也 是允许的。</p><h1 id="五-安装ssh客户端软件"><a href="#五-安装ssh客户端软件" class="headerlink" title="五.安装ssh客户端软件"></a>五.安装ssh客户端软件</h1><p>客户端软件：ftp: ﬁlezilla    终端：xshell </p><h1 id="六-软件的安装"><a href="#六-软件的安装" class="headerlink" title="六.软件的安装"></a>六.软件的安装</h1><p><strong>在/home目录创建soft目录，通过客户软件ftp将本地下载好的所有东西上传soft目录下。</strong></p><h2 id="1-安装JDK"><a href="#1-安装JDK" class="headerlink" title="1.安装JDK"></a>1.安装JDK</h2><p>01、在/home目录创建soft目录，通过客户软件ftp将本地下载好的JDK上传soft目录下。<br>02、将JDK解压到/usr/java中，注意：前提在usr目录下创建java目录。<br>03、进入/usr/java 目录，确认jdk解压后的目录是否存在<br>04、打开vim 编辑器编辑/etc/proﬁle 配置文件，进行jdk环境变量的配置。 vim /ect/proﬁle  进入文档编辑状态。<br>a、在源文件最后一行加入以下配置代码，注意JAVA_HOME 的路径为jdk解压后的目录<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615957451861-0a0a19f3-e55f-4715-91c5-534113feb251.png#align=left&display=inline&height=177&margin=%5Bobject%20Object%5D&name=image.png&originHeight=354&originWidth=869&size=74772&status=done&style=none&width=434.5" alt="image.png"><br>05、重新加载 /etc/proﬁle 配置文件（source /etc/profile），并测试jdk环境变量是否配置成功<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615957524078-723e93df-9dac-41d4-9b7d-9cbdfead4596.png#align=left&display=inline&height=157&margin=%5Bobject%20Object%5D&name=image.png&originHeight=314&originWidth=1092&size=182497&status=done&style=none&width=546" alt="image.png"></p><h2 id="2-安装tomcat"><a href="#2-安装tomcat" class="headerlink" title="2.安装tomcat"></a>2.安装tomcat</h2><p>01、 进入 /home/soft ，将tomcat解压到/usr/local 下<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615957642502-4a3974fb-773b-471a-b214-cd92c9c7f554.png#align=left&display=inline&height=90&margin=%5Bobject%20Object%5D&name=image.png&originHeight=180&originWidth=1207&size=91764&status=done&style=none&width=603.5" alt="image.png"><br>02 、进入/usr/local目录，确认tomcat是否解压成功，也就是解压后的目录是否存在<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615957676033-b6a909b3-6ce2-4c37-963c-679b6c084920.png#align=left&display=inline&height=37&margin=%5Bobject%20Object%5D&name=image.png&originHeight=74&originWidth=581&size=32101&status=done&style=none&width=290.5" alt="image.png"><br>03 、开放Linux 的对外访问的端口8080，在默认情况下，Linux 不会开放端口号</p><p><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615957705678-1a913001-5662-4b21-9908-8a5d4cdcdbff.png#align=left&display=inline&height=185&margin=%5Bobject%20Object%5D&name=image.png&originHeight=370&originWidth=1328&size=68934&status=done&style=none&width=664" alt="image.png"><br>04 、进入tomcat 的bin目录，并启动tomcat<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615957732660-47cd7305-02b1-43f3-8176-47194fb6eed4.png#align=left&display=inline&height=112&margin=%5Bobject%20Object%5D&name=image.png&originHeight=224&originWidth=995&size=104312&status=done&style=none&width=497.5" alt="image.png"><br>05 、tomcat 启动测试，如果出现如下图所示效果，则表示tomcat 安装成功<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615957752898-19549c9f-7d1b-4b0f-aeb0-0105709745a3.png#align=left&display=inline&height=256&margin=%5Bobject%20Object%5D&name=image.png&originHeight=511&originWidth=1136&size=237981&status=done&style=none&width=568" alt="image.png"></p><h2 id="3-安装数据库（MariaDB）"><a href="#3-安装数据库（MariaDB）" class="headerlink" title="3.安装数据库（MariaDB）"></a>3.安装数据库（MariaDB）</h2><p>mysql 与Maria DB的区别：Maria DB 是mysql的一个分支，二者使用起来几乎没有区别，包括命 令等，主要由于mysql 被oracle收购，社区担心mysql有闭源的风险，因此未了避开这个分享，所 以采用分支方式使用mysql。 <br>下载地址：<a href="https://mariadb.org/download/">https://mariadb.org/download/</a><br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615957985173-4f2fb6c7-47f2-4ce0-a675-fd80a9291a11.png#align=left&display=inline&height=475&margin=%5Bobject%20Object%5D&name=image.png&originHeight=950&originWidth=1726&size=180769&status=done&style=none&width=863" alt="image.png"><br>01、在 <code>/etc/yum.repos.d/</code> 下建立 MariaDB.repo<br>02、在 <code>/etc/yum.repos.d/</code> 下打开 MariaDB.repo<br><code>vim /etc/yum.repos.d/MariaDB.repo</code><br>03、把上边图片中的代码复制进去<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615958193897-6ef0e910-fcbf-4dc0-ae7c-ad0deb54e11b.png#align=left&display=inline&height=46&margin=%5Bobject%20Object%5D&name=image.png&originHeight=91&originWidth=506&size=38646&status=done&style=none&width=253" alt="image.png"><br>04、执行命令<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615958222752-bf12d644-1bd8-496b-8c64-eb626049e783.png#align=left&display=inline&height=20&margin=%5Bobject%20Object%5D&name=image.png&originHeight=40&originWidth=213&size=7897&status=done&style=none&width=106.5" alt="image.png"><br>测试：</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器Linux系统中搭建Java Web环境（二）</title>
      <link href="2021/03/17/a-li-yun-fu-wu-qi-linux-xi-tong-zhong-da-jian-java-web-huan-jing-er/"/>
      <url>2021/03/17/a-li-yun-fu-wu-qi-linux-xi-tong-zhong-da-jian-java-web-huan-jing-er/</url>
      
        <content type="html"><![CDATA[<h1 id="一-准备材料"><a href="#一-准备材料" class="headerlink" title="一.准备材料"></a>一.准备材料</h1><p><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615958419152-77e3977e-6a1d-404e-8a89-6d90184e97ba.png#align=left&display=inline&height=69&margin=%5Bobject%20Object%5D&name=image.png&originHeight=137&originWidth=414&size=12883&status=done&style=none&width=207" alt="image.png"><br>版本无所谓，全放/home/soft/fastDFS目录下备用。</p><h1 id="二-安装fastdfscommon"><a href="#二-安装fastdfscommon" class="headerlink" title="二.安装fastdfscommon"></a>二.安装fastdfscommon</h1><p>1。安装所需要的依赖环境   <strong>yum -y install libevent</strong><br>2。解压fastdfscommon压缩包 tar -zxvf libfastcommon-1.0.7.tar.gz<br>3。进入刚解压出来的fastdfscommon文件夹, 找到make.sh文件用它来进行编译  ./make.sh<br>如果编译出错，解决方案如下：<br>安装一下依赖：<br>yum install gcc-c++<br>yum install pcre pcre-devel<br>yum install zlib zlib-devel<br>yum install openssl openssl-devel<br>4。安装刚刚编译的fastdfscommon文件   ./make.sh install<br>5。安装后会安装到目录 /usr/lib64, 该目录有很多文件,进入此目录查看所有可以使用以下命令 ll libfast*<br>6。因为lib64是64位的环境, 所以我们要将它移至目录 /usr/lib,   cp libfastcommon.so /usr/lib</p><h1 id="三-安装tracker服务"><a href="#三-安装tracker服务" class="headerlink" title="三.安装tracker服务"></a>三.安装tracker服务</h1><p>1。找到 fastdfs-5.05.tar.gz压缩文件 ,然后解压它tar -zxvf fastdfs-5.05.tar.gz<br>2。 进入刚解压出来的fastdfs-5.05.文件夹, 找到make.sh文件用它来进行编译  ./make.sh<br>3。安装刚刚编译的fastdfscommon文件   ./make.sh install<br>4。安装完后,fastdfs会在目录 /usr/bin/ 添加了以fdfs为前缀的文件,查看命令如下  ll fdfs*<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615958897500-8f895f45-c709-4619-a1ba-52f1cf522fd1.png#align=left&display=inline&height=140&margin=%5Bobject%20Object%5D&name=image.png&originHeight=279&originWidth=553&size=89785&status=done&style=none&width=276.5" alt="image.png"><br>5。另外fastdfs也会在 目录 /etc/fdfs/ 添加相关配置,转到该目录  cd /etc/fdfs/ , 然后查看此目录相关文件 ll<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615958928560-db4848e0-1dd9-4a7b-a98f-e347b05e0893.png#align=left&display=inline&height=62&margin=%5Bobject%20Object%5D&name=image.png&originHeight=123&originWidth=528&size=15110&status=done&style=none&width=264" alt="image.png"><br>6。 然后转到 已经解压出来的fastdfs-5.05 文件夹目录,  里面会有conf文件夹目录, 再进入到此目录中, 如图<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615958954451-7c766f6d-c273-4ea6-9553-c2d92bd51a60.png#align=left&display=inline&height=261&margin=%5Bobject%20Object%5D&name=image.png&originHeight=522&originWidth=531&size=66784&status=done&style=none&width=265.5" alt="image.png"><br>7。将上面所有文件全部拷贝到 目录 /etc/fdfs/ 中去  cp * /etc/fdfs/  ,转到目录/etc/fdfs/,  查看此目录内容  ll<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615958984158-17e4fd7c-8e55-4315-ac08-a8be48389f91.png#align=left&display=inline&height=130&margin=%5Bobject%20Object%5D&name=image.png&originHeight=259&originWidth=554&size=61725&status=done&style=none&width=277" alt="image.png"><br>8。修改 tracker.conf 文件   vim tracker.conf ,  找到base_path 关键字符串(此路径也就是日志的保持路径, 这个随意填写)<br>base_path=/fastdfs/tracker<br>9。创建上面所填写修改的路径, (上面是 /fastdfs/tracker)   mkdir /fastdfs/tracker -p<br>10。分别在fastdfs目录创建 storage , client和tmp , 为下面准备 mkdir /fastdfs/storage -p, mkdir /fastdfs/client -p, mkdir /fastdfs/tmp -p<br>进入cd /fastdfs    ll 查看目录结构<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615959120188-fc52451a-d43f-46b0-81d7-eaa5d897bc8d.png#align=left&display=inline&height=115&margin=%5Bobject%20Object%5D&name=image.png&originHeight=229&originWidth=440&size=20012&status=done&style=none&width=220" alt="image.png"><br>11。 (可以先进入 cd /usr/bin回车，查看ll fdfs*)启动tracker服务   <br>/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf <br>按下回车(重启命令 /usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart)</p><h1 id="四-安装storage服务"><a href="#四-安装storage服务" class="headerlink" title="四.安装storage服务"></a>四.安装storage服务</h1><p>1。上面我们已经在根目录的fastdfs /fastdfs 创建了client, storage和tracke三个目录      ll /fastdfs (如上图所示)<br>2。进入 /etc/fdfs目录下 cd /etc/fdfs/, 然后修改 storage.conf文件<br>vim storage.conf ,找到  base_path 关键字然后修改此路径(日志保存的路径)<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615959244379-1b21ac2f-245b-4806-96f2-eb5ac6040ca4.png#align=left&display=inline&height=53&margin=%5Bobject%20Object%5D&name=image.png&originHeight=106&originWidth=373&size=9315&status=done&style=none&width=186.5" alt="image.png"><br>3。再找 group name 关键字wdzl<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615959276090-3e743bc7-9cf5-4c42-8d97-33a07ca01388.png#align=left&display=inline&height=106&margin=%5Bobject%20Object%5D&name=image.png&originHeight=212&originWidth=513&size=23765&status=done&style=none&width=256.5" alt="image.png"><br>4。再找 store_path0 (文件存储的路径)<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615959308640-24d049fb-9cae-4000-9131-854595212756.png#align=left&display=inline&height=59&margin=%5Bobject%20Object%5D&name=image.png&originHeight=118&originWidth=333&size=10760&status=done&style=none&width=166.5" alt="image.png"><br>5。再配置与tracker 关联起来 , 配置完后保存退出        :wq</p><p>配置 tracker 服务器的地址 xx:xx.x.xx:22122    这里应该是你自己tracker的地址</p><p>6。启动storage服务, 目录转到/usr/bin/目录下 <br>./fdfs_storaged /etc/fdfs/storage.conf 命令启动服务 <br>(./fdfs_storaged /etc/fdfs/storage.conf restart) 重启<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615959400883-8ab54e89-9966-47be-8cef-4f229afa19f8.png#align=left&display=inline&height=193&margin=%5Bobject%20Object%5D&name=image.png&originHeight=385&originWidth=549&size=59473&status=done&style=none&width=274.5" alt="image.png"><br>7。可以查看服务有没有启动   <br>ps aux | grep storage<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615959420054-01168bdc-0718-40a8-bcaa-b8c7658a36ca.png#align=left&display=inline&height=24&margin=%5Bobject%20Object%5D&name=image.png&originHeight=47&originWidth=553&size=11633&status=done&style=none&width=276.5" alt="image.png"></p><h1 id="五-配置client并且上传测试图片"><a href="#五-配置client并且上传测试图片" class="headerlink" title="五.配置client并且上传测试图片"></a>五.配置client并且上传测试图片</h1><p>1。转到 /etc/fdfs/ 目录下,<br>然后修改client.conf文件 vim client.conf,<br>找到 base_path 关键字(存储日志的目录) 与 配置tracker服务器的地址<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615959491109-0199be55-1589-4165-b279-f0f5f624ee4a.png#align=left&display=inline&height=63&margin=%5Bobject%20Object%5D&name=image.png&originHeight=126&originWidth=476&size=12251&status=done&style=none&width=238" alt="image.png"><br>2。目录转到 /usr/bin目录下,<br>会有个client_test文件<br>启动  /usr/bin/fdfs_test  /etc/fdfs/client.conf  upload  /home/testPic.jpg<br>ps: /home/1.jpg 就是你要上传测试的图片地址<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615959535179-51f105db-60c5-421d-b4d1-bc7cf53f2bca.png#align=left&display=inline&height=120&margin=%5Bobject%20Object%5D&name=image.png&originHeight=240&originWidth=553&size=45523&status=done&style=none&width=276.5" alt="image.png"><br>刚刚测试上传的图片文件 保存在 /fastdfs/storage/data/00/00/ 目录下</p><h1 id="六-fastdfs与nginx配置"><a href="#六-fastdfs与nginx配置" class="headerlink" title="六.fastdfs与nginx配置"></a>六.fastdfs与nginx配置</h1><p>1。 找到之前上传的 fastdfs-nginx-module.tar.gz 压缩包文件, 解压它 tar -zxvf fastdfs-nginx-module.tar.gz<br>2。进入解压后的文件的src目录下,<br>然后修改config文件 vim config ,<br>替换下面的代码,或者把local字样去掉<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615959611805-5ecefc72-3ef9-46cd-89c4-ba8241a9d740.png#align=left&display=inline&height=45&margin=%5Bobject%20Object%5D&name=image.png&originHeight=89&originWidth=553&size=20394&status=done&style=none&width=276.5" alt="image.png"></p><h1 id="七-安装nginx和配置"><a href="#七-安装nginx和配置" class="headerlink" title="七.安装nginx和配置"></a>七.安装nginx和配置</h1><p>1。安装nginx 所需要的库(如果前面安装过，此处无需安装)<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615959659176-1c32981f-9f4a-4ab8-b773-9cd481d8ae41.png#align=left&display=inline&height=86&margin=%5Bobject%20Object%5D&name=image.png&originHeight=171&originWidth=363&size=7353&status=done&style=none&width=181.5" alt="image.png"><br>2。找到之前上传的 nginx 压缩包  tar -zxvf nginx-1.12.0.tar.gz<br>3。解压后转到该文件夹根目录下, 如 (/home/nginx-1.12.0) ,<br>最后复制粘贴下面的代码,修改–add-module是指向你fastdfs-nginx-module的src文件所在路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure \</span><br><span class="line">--prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx \</span><br><span class="line">--pid-path&#x3D;&#x2F;var&#x2F;run&#x2F;nginx&#x2F;nginx.pid \</span><br><span class="line">--lock-path&#x3D;&#x2F;var&#x2F;lock&#x2F;nginx.lock \</span><br><span class="line">--error-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log \</span><br><span class="line">--http-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;client \</span><br><span class="line">--http-proxy-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;proxy \</span><br><span class="line">--http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;fastcgi \</span><br><span class="line">--http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;uwsgi \</span><br><span class="line">--http-scgi-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;scgi \</span><br><span class="line">--add-module&#x3D;&#x2F;home&#x2F;soft&#x2F;fastDFS&#x2F;fastdfs-nginx-module&#x2F;src</span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615959804401-8705c86d-3a67-4ee8-a93a-3939505fc718.png#align=left&display=inline&height=162&margin=%5Bobject%20Object%5D&name=image.png&originHeight=162&originWidth=199&size=20614&status=done&style=none&width=199" alt="image.png"><br>4。编译并安装nginx, 在该文件夹根目录下, 如 (/home/tar/nginx-1.15.0)<br>输入编译命令 make ,然后安装 make install<br>5。安装完后在 /usr/local/ 目录下会多出nginx文件目录, 进入此目录<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615959853790-d2d8f37b-ea76-4658-93b7-23ffdc91b640.png#align=left&display=inline&height=189&margin=%5Bobject%20Object%5D&name=image.png&originHeight=378&originWidth=454&size=31637&status=done&style=none&width=227" alt="image.png"><br>6。转到 上面所解压完的fastdfs-nginx-module 文件夹进入到里面的src目录下,<br>拷贝 mod_fastdfs.conf 文件到 /etc/fdfs 目录下<br>      cp mod_fastdfs.conf  /etc/fdfs <br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615959888938-1cf0f69f-ebed-4fc9-be14-5ab32cf23629.png#align=left&display=inline&height=139&margin=%5Bobject%20Object%5D&name=image.png&originHeight=277&originWidth=520&size=37707&status=done&style=none&width=260" alt="image.png"><br>7。进入到 /etc/fdfs 目录下,<br>然后修改 mod_fastdfs.conf 文件 vim  mod_fastdfs.conf, 修改如下图<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615959914413-6d84eeb7-aefc-4348-a31d-2d06c525e3df.png#align=left&display=inline&height=31&margin=%5Bobject%20Object%5D&name=image.png&originHeight=62&originWidth=314&size=4094&status=done&style=none&width=157" alt="image.png"><br>配置 tracker 服务器的地址 192:168.1.103:22122    这里应该是你自己tracker的地址<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615959933136-d185d240-9694-4812-b069-a0bf70e15d30.png#align=left&display=inline&height=29&margin=%5Bobject%20Object%5D&name=image.png&originHeight=57&originWidth=338&size=5428&status=done&style=none&width=169" alt="image.png"><br>配置之前所设置的 group_name<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615959944030-51d21db7-b19f-4d76-9772-3eeb1babfd49.png#align=left&display=inline&height=27&margin=%5Bobject%20Object%5D&name=image.png&originHeight=54&originWidth=316&size=4332&status=done&style=none&width=158" alt="image.png"><br>配置是否需要添加组织的名字 , 设置为true<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615959957236-ad518547-311a-4247-874d-6f28c85039f2.png#align=left&display=inline&height=34&margin=%5Bobject%20Object%5D&name=image.png&originHeight=67&originWidth=288&size=5366&status=done&style=none&width=144" alt="image.png"><br>配置store_path0 , 如下图所示<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615959968156-1035f8b0-f620-40f0-98b1-ad47f92438d8.png#align=left&display=inline&height=39&margin=%5Bobject%20Object%5D&name=image.png&originHeight=77&originWidth=329&size=7330&status=done&style=none&width=164.5" alt="image.png"><br>8。进入 nginx 安装目录 进入conf 目录（usr/local/nginx/conf  ll）<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615959993474-c9c11bcb-c1be-477a-b0fc-e1f18cf85686.png#align=left&display=inline&height=226&margin=%5Bobject%20Object%5D&name=image.png&originHeight=451&originWidth=549&size=58759&status=done&style=none&width=274.5" alt="image.png"><br>9。编辑 nginx.conf 配置文件  <br>vim nginx.conf,  添加新的服务器节点 , 最后保存   :wq<br>server_name  192.168.1.103 就是要被访问的服务器地址, 这里需要换你自己的ip<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615960030104-771fb20f-a6c7-422e-abac-7f2942d82cc8.png#align=left&display=inline&height=118&margin=%5Bobject%20Object%5D&name=image.png&originHeight=235&originWidth=262&size=20104&status=done&style=none&width=131" alt="image.png"><br>10。检测 nginx  转到nginx安装目录下的sbin的目录下   <br>(启动之前可以 使用 ./nginx -t 检测是否配置正确)<br>如果出现下图问题：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615960110789-11dc325a-8fc2-4162-8966-5f695e11cd11.png#align=left&display=inline&height=42&margin=%5Bobject%20Object%5D&name=image.png&originHeight=84&originWidth=554&size=18909&status=done&style=none&width=277" alt="image.png"><br>进入nginx 解压后的目录，删除Makefile文件<br>重新进入nginx解压后的目录，如：cd /home/tar/nginx-1.15.2 回车，将<br>下图代码进行重新编译：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615960119833-b924cb6a-aadc-49fa-9c27-f7bd20b7d3ea.png#align=left&display=inline&height=118&margin=%5Bobject%20Object%5D&name=image.png&originHeight=235&originWidth=449&size=24838&status=done&style=none&width=224.5" alt="image.png"><br>回车，然后进入nginx解压后的根目录进行编译和安装，输入命令 make &amp;&amp; make install 回车即可。<br>再次进入nginx安装目录下的sbin目录，输入命令 ./nginx -t,结果如下图：<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615960127719-f00700ea-3a8a-4d4b-a0e0-dc7be42e703e.png#align=left&display=inline&height=40&margin=%5Bobject%20Object%5D&name=image.png&originHeight=80&originWidth=554&size=20405&status=done&style=none&width=277" alt="image.png"></p><p>11。启动nginx   ./nginx<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615960205067-6c1b2375-de43-42f0-bb5b-dc4612c922a1.png#align=left&display=inline&height=27&margin=%5Bobject%20Object%5D&name=image.png&originHeight=53&originWidth=292&size=4648&status=done&style=none&width=146" alt="image.png"></p><h1 id="八。浏览器查看图片"><a href="#八。浏览器查看图片" class="headerlink" title="八。浏览器查看图片"></a>八。浏览器查看图片</h1><p>打开浏览器 输入图片地址 <br>http://你的地址:88/wdzl/M00/00/00/图片名称<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615960379794-2e338d5e-c061-489c-acb1-020e6919c7a5.png#align=left&display=inline&height=372&margin=%5Bobject%20Object%5D&name=image.png&originHeight=744&originWidth=1172&size=1224926&status=done&style=none&width=586" alt="image.png"></p><p><strong>以后的上传图片或文件：</strong><br>目录转到 /usr/bin目录下,<br>会有个client_test文件<br>启动  /usr/bin/fdfs_test  /etc/fdfs/client.conf  upload  /home/testPic.jpg<br>ps: /home/1.jpg 就是你要上传测试的图片地址<br><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2021/png/510079/1615959535179-51f105db-60c5-421d-b4d1-bc7cf53f2bca.png#align=left&display=inline&height=120&margin=%5Bobject%20Object%5D&name=image.png&originHeight=240&originWidth=553&size=45523&status=done&style=none&width=276.5" alt="image.png"><br>上传的图片文件 保存在 /fastdfs/storage/data/00/00/ 目录下</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6数值的扩展</title>
      <link href="2021/03/09/es6-shu-zhi-de-kuo-zhan/"/>
      <url>2021/03/09/es6-shu-zhi-de-kuo-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="1-二进制和八进制的表示方法"><a href="#1-二进制和八进制的表示方法" class="headerlink" title="1.二进制和八进制的表示方法"></a>1.二进制和八进制的表示方法</h1><p>ES6提供了二进制和八进制数值的新的方法，分别用前缀0b（或者0B）和0o（或者00）表示。</p><h1 id="2-Number-isFinite-Number-isNaN"><a href="#2-Number-isFinite-Number-isNaN" class="headerlink" title="2.Number.isFinite(),Number.isNaN()"></a>2.Number.isFinite(),Number.isNaN()</h1><p>ES6在Number对象上，新提供了Number.isFinite()和Number.isNaN()两个方法。<br>Number.isFinite()用来检查一个数值是否为有限的（finite），即不是Infinity。</p><h1 id="3-Number-parseInt-Number-parseFloat"><a href="#3-Number-parseInt-Number-parseFloat" class="headerlink" title="3.Number.parseInt(),Number.parseFloat()"></a>3.Number.parseInt(),Number.parseFloat()</h1><p>ES6将全局方法parseInt()和parseFloat()，一直到Number对象上面，行为保持不变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5的写法</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;12.34&#x27;</span>) <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;123.45#&#x27;</span>) <span class="comment">// 123.45</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的写法</span></span><br><span class="line"><span class="built_in">Number</span>.parseInt(<span class="string">&#x27;12.34&#x27;</span>) <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">Number</span>.parseFloat(<span class="string">&#x27;123.45#&#x27;</span>) <span class="comment">// 123.45</span></span><br></pre></td></tr></table></figure><p>这样的做法的目的，是逐步减少全局性方法，使得语言逐步模块化。</p><h1 id="4-Number-isInteger"><a href="#4-Number-isInteger" class="headerlink" title="4.Number.isInteger()"></a>4.Number.isInteger()</h1><p>Number.isInteger()用来判断一个数值是否为整数。</p><p>。<br>。<br>。</p><h1 id="7-Math对象的扩展"><a href="#7-Math对象的扩展" class="headerlink" title="7.Math对象的扩展"></a>7.Math对象的扩展</h1><p>ES6在Math对象上新增了17个与数学相关的方法。所有的这些方法都是静态方法，只能在Math对象上调用。</p><h2 id="7-1-Math-trunc"><a href="#7-1-Math-trunc" class="headerlink" title="7.1 Math.trunc()"></a>7.1 Math.trunc()</h2><p>Math.trunc方法用于去除一个数的小树部分，返回整数部分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.trunc(<span class="number">4.1</span>) <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">Math</span>.trunc(<span class="number">4.9</span>) <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">Math</span>.trunc(-<span class="number">4.1</span>) <span class="comment">// -4</span></span><br><span class="line"><span class="built_in">Math</span>.trunc(-<span class="number">4.9</span>) <span class="comment">// -4</span></span><br><span class="line"><span class="built_in">Math</span>.trunc(-<span class="number">0.1234</span>) <span class="comment">// -0</span></span><br></pre></td></tr></table></figure><p>对于非数值，Math.trunc内部使用Number方法将其先转数值。<br>对于空值和无法截取整数的值。返回NaN。</p><h2 id="7-2-Math-sign"><a href="#7-2-Math-sign" class="headerlink" title="7.2 Math.sign()"></a>7.2 Math.sign()</h2><p>Math.sign方法用来判断一个数到底是正数，负数，还是零。对于非数值，会将其转换为数值。<br>它会返回五种值。<br>参数为正数，返回+1；<br>。。为负数，返回-1；<br>。。为0，     返回0；<br>。。为-0，   返回-0；<br>其他值，      返回NaN；</p><h2 id="7-3-Math-cbrt"><a href="#7-3-Math-cbrt" class="headerlink" title="7.3 Math.cbrt()"></a>7.3 Math.cbrt()</h2><p>Math.cbrt()方法用于计算一个数的立方根。</p><h2 id="7-4-Math-clz32"><a href="#7-4-Math-clz32" class="headerlink" title="7.4 Math.clz32()"></a>7.4 Math.clz32()</h2><p>方法将参数转化为32位无符号正数的形式，然后返回这个32位值里面有多少个前导0；</p><h2 id="7-5-Math-imul"><a href="#7-5-Math-imul" class="headerlink" title="7.5 Math.imul()"></a>7.5 Math.imul()</h2><p>方法返回两个数以32位带符号整数形式相乘的结果，返回的也是一个32位带符号的整数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.imul(<span class="number">2</span>, <span class="number">4</span>)   <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">Math</span>.imul(-<span class="number">1</span>, <span class="number">8</span>)  <span class="comment">// -8</span></span><br><span class="line"><span class="built_in">Math</span>.imul(-<span class="number">2</span>, -<span class="number">2</span>) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h2 id="7-6-Math-fround"><a href="#7-6-Math-fround" class="headerlink" title="7.6 Math.fround()"></a>7.6 Math.fround()</h2><p>方法返回一个数的32位单精度浮点数形式。</p><h2 id="7-7-Math-hypot"><a href="#7-7-Math-hypot" class="headerlink" title="7.7 Math.hypot()"></a>7.7 Math.hypot()</h2><p>方法返回所有参数的平方和的平方根。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">3</span>, <span class="number">4</span>);        <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);     <span class="comment">// 7.0710678118654755</span></span><br><span class="line"><span class="built_in">Math</span>.hypot();            <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Math</span>.hypot(<span class="literal">NaN</span>);         <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;foo&#x27;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;5&#x27;</span>);   <span class="comment">// 7.0710678118654755</span></span><br><span class="line"><span class="built_in">Math</span>.hypot(-<span class="number">3</span>);          <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="7-8-对数方法"><a href="#7-8-对数方法" class="headerlink" title="7.8 对数方法"></a>7.8 对数方法</h2><p>ES6新增了4个对数相关方法。</p><h3 id="1-Math-expm1"><a href="#1-Math-expm1" class="headerlink" title="(1)Math.expm1()"></a>(1)Math.expm1()</h3><p>Math.expm1(x)返回e的x次方-1，即Math.exp(x)-1。</p><h3 id="2-Math-log1p"><a href="#2-Math-log1p" class="headerlink" title="(2)Math.log1p()"></a>(2)Math.log1p()</h3><p>方法返回1+x的自然对数，即Math.log(x+1)。如果x小于-1，返回NaN。</p><h3 id="3-Math-log10"><a href="#3-Math-log10" class="headerlink" title="(3)Math.log10()"></a>(3)Math.log10()</h3><p>返回以10为底的x的对数。如果x小于0，则返回NaN。</p><h3 id="4-Math-log2"><a href="#4-Math-log2" class="headerlink" title="(4)Math.log2()"></a>(4)Math.log2()</h3><p>返回以2为底的x的对数。如果x小于0，则返回NaN。</p><h2 id="7-9-双曲函数方法"><a href="#7-9-双曲函数方法" class="headerlink" title="7.9 双曲函数方法"></a>7.9 双曲函数方法</h2><p>ES6新增了6个双曲函数方法。<br>Math.sinh(x) 返回x的双曲正弦<br>Math.cosh(x) 返回x的双曲余弦<br>Math.tanh(x) 返回x的双曲正切<br>Math.asinh(x) 返回x的反双曲正弦<br>Math.acosh(x) 返回x的反双曲余弦<br>Math.atanh(x) 返回x的反双曲正切</p><h1 id="8-指数运算符"><a href="#8-指数运算符" class="headerlink" title="8.指数运算符"></a>8.指数运算符</h1><p>ES2016新增一个指数运算符（**）。<br>注意：这个运算符的一个特点是右结合，而不是常见的左结合。多个指数运算符连用时，是从最右边开始计算的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相当于 2 ** (3 ** 2)</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">3</span> ** <span class="number">2</span></span><br><span class="line"><span class="comment">// 512</span></span><br></pre></td></tr></table></figure><h1 id="9-BigInt数据类型"><a href="#9-BigInt数据类型" class="headerlink" title="9. BigInt数据类型"></a>9. BigInt数据类型</h1><h2 id="9-1-简介"><a href="#9-1-简介" class="headerlink" title="9.1 简介"></a>9.1 简介</h2><p>JavaScript所有数字都保存成64位浮点数，这给数值的表示带来了两大限制。一是数值的精度只能到53个二进制位（相当于16个十进制位），大于这个范围的整数，</p>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中reduce()的用法</title>
      <link href="2021/03/09/js-zhong-reduce-de-yong-fa/"/>
      <url>2021/03/09/js-zhong-reduce-de-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="一-定义和用法"><a href="#一-定义和用法" class="headerlink" title="一.定义和用法"></a>一.定义和用法</h1><p>reduce()方法接受一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。<br>reduce()可以作为一个高阶函数，用于函数的compose。<br><strong>注意</strong>：reduce()对于空数组是不会执行回调函数的。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>arr.reduce(function(total, currentValue, currentIndex, arr)&#123;&#125;, initialValue);</code><br><code> </code></p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th><th></th></tr></thead><tbody><tr><td><em>function(total,currentValue, index,arr)</em></td><td>必需。用于执行每个数组元素的函数。函数参数：</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td><strong>参数</strong></td><td><strong>描述</strong></td><td></td></tr><tr><td>total</td><td>必需。初始值，或者计算结束后的返回值</td><td></td></tr><tr><td>currentValue</td><td>必需。当前正在处理的数组元素</td><td></td></tr><tr><td>currentIndex</td><td>可选。当前元素索引</td><td></td></tr><tr><td>arr</td><td>可选。当前元素所属的数组对象</td><td></td></tr><tr><td>initialValue</td><td>可选。传递给函数的初始值</td><td></td></tr></tbody></table><p>看上去挺TM复杂的，其实常用的参数只有两个：total和currentValue。</p><h1 id="二-实例"><a href="#二-实例" class="headerlink" title="二.实例"></a>二.实例</h1><p>先提供一个原始数组：<br><code>var arr = [3,9,4,3,6,0,9];</code><br>实现一下需求的方式有很多，其中就包含使用reduce()的求解方式，也算是实现起来比较简洁的一种吧。</p><h2 id="1-求数组想之和"><a href="#1-求数组想之和" class="headerlink" title="1.求数组想之和"></a>1.求数组想之和</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">total,currentValue</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> total+currentValue;</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>由于传入了初始值0，所以开始时total的值为0，currentValue的值为数组第一项3，相加之后返回值为3作为下一轮回调的total值，然后再继续与下一个数组项相加，以此类推。</p><h2 id="2-求数组项最大值"><a href="#2-求数组项最大值" class="headerlink" title="2.求数组项最大值"></a>2.求数组项最大值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> max = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">total,currentValue</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(total,currentValue)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>由于未传入初始值，所以开始时total的值为数组第一项3，currentValue的值为数组第二项9，取两值最大后继续进入下一轮回调。</p><h2 id="3-数组去重"><a href="#3-数组去重" class="headerlink" title="3.数组去重"></a>3.数组去重</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">total,currentValue</span>)</span>&#123;</span><br><span class="line">  total,indexOf(currentValue) === -<span class="number">1</span> &amp;&amp; total.push(currentValue);</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">&#125;,[]);</span><br></pre></td></tr></table></figure><p>实现的基本原理如下：<br>1.初始化一个空数组<br>2.将需要去重处理的数组中的第一项在初始化数组中查找，如果找不到（空数组中肯定找不到），就将该项添加到初始化数组中<br>2.将需要去重处理的数组中的第二项在初始化数组中查找，如果找不到，就将该项继续添加到初始化数组中<br>4.。。。。<br>5.将需要去重处理的数组中的第n项在初始化数组中查找，如果找不到，就将该项继续添加到初始化数组中<br>6.将这个初始化数组返回</p><h1 id="三-其他相关方法"><a href="#三-其他相关方法" class="headerlink" title="三. 其他相关方法"></a>三. 其他相关方法</h1><h2 id="1-reduceRight"><a href="#1-reduceRight" class="headerlink" title="1.reduceRight()"></a>1.reduceRight()</h2><p>该方法用法与reduce()其实是相同的，只是遍历的顺序相反，它是从数组的最后一项开始，向前遍历到第一项。</p><h2 id="2-forEach-、map-、every-、some-和filter"><a href="#2-forEach-、map-、every-、some-和filter" class="headerlink" title="2.forEach()、map()、every()、some()和filter()"></a>2.forEach()、map()、every()、some()和filter()</h2><p>（未完）<br><strong>重点总结：</strong><br><strong>reduce()是数组的归并方法，与forEach()、map()、filter()等迭代方法一样都会对数组每一项进行遍历，但是reduce()可同时将前面数组项遍历产生的结果与当前遍历项进行运算，这一点是其他迭代方法无法企及的。</strong><br>**</p><h1 id="四-进阶用法"><a href="#四-进阶用法" class="headerlink" title="四. 进阶用法"></a>四. 进阶用法</h1><h2 id="1-数组对象中的用法"><a href="#1-数组对象中的用法" class="headerlink" title="1.数组对象中的用法"></a>1.数组对象中的用法</h2><!-- 比如生成“老大、老二和老三” --><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objArr = [&#123;<span class="attr">name</span>: <span class="string">&#x27;老大&#x27;</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">&#x27;老二&#x27;</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">&#x27;老三&#x27;</span>&#125;];</span><br><span class="line"><span class="keyword">const</span> res = objArr.reduce(<span class="function">(<span class="params">pre, cur, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cur.name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (index === (arr.length - <span class="number">1</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> pre + <span class="string">&#x27;和&#x27;</span> + cur.name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pre + <span class="string">&#x27;、&#x27;</span> + cur.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="2-求字符串中字母出现的次数（-）"><a href="#2-求字符串中字母出现的次数（-）" class="headerlink" title="2.求字符串中字母出现的次数（***）"></a>2.求字符串中字母出现的次数（***）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;sfhjasfjgfasjuwqrqadqeiqsajsdaiwqdaklldflas-cmxzmnha&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> res = str.split(<span class="string">&#x27;&#x27;</span>).reduce(<span class="function">(<span class="params">accumulator, cur</span>) =&gt;</span> &#123;</span><br><span class="line">  accumulator[cur] ? accumulator[cur]++ : accumulator[cur] = <span class="number">1</span>; </span><br><span class="line">  <span class="keyword">return</span> accumulator;</span><br><span class="line">&#125;, &#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-数组转数组"><a href="#3-数组转数组" class="headerlink" title="3.数组转数组"></a>3.数组转数组</h2><!-- 按照规定转成数组 --><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];      <span class="comment">//每个值的平方</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">new</span> = arr1.reduce(<span class="function">(<span class="params">accumulator,cur</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator.push(cur*cur)</span><br><span class="line">&#125;,[]);</span><br></pre></td></tr></table></figure><h1 id="五-高级用法"><a href="#五-高级用法" class="headerlink" title="五.高级用法"></a>五.高级用法</h1><h2 id="1-多维的叠加执行操作"><a href="#1-多维的叠加执行操作" class="headerlink" title="1.多维的叠加执行操作"></a>1.多维的叠加执行操作</h2><!-- 各科成绩占比重不一样，求结果 --><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = [</span><br><span class="line">  &#123; <span class="attr">subject</span>: <span class="string">&#x27;math&#x27;</span>, <span class="attr">score</span>: <span class="number">88</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">subject</span>: <span class="string">&#x27;chinese&#x27;</span>, <span class="attr">score</span>: <span class="number">95</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">subject</span>: <span class="string">&#x27;english&#x27;</span>, <span class="attr">score</span>: <span class="number">80</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> dis = &#123;</span><br><span class="line">    math: <span class="number">0.5</span>,</span><br><span class="line">    chinese: <span class="number">0.3</span>,</span><br><span class="line">    english: <span class="number">0.2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> res = result.reduce(<span class="function">(<span class="params">accumulator, cur</span>) =&gt;</span> dis[cur.subject] * cur.score + accumulator, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><!-- 加大难度，商品对应不同国家汇率不同，求总价格--><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = [&#123;</span><br><span class="line">        subject: <span class="string">&#x27;math&#x27;</span>,</span><br><span class="line">        score: <span class="number">88</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">&#x27;chinese&#x27;</span>,</span><br><span class="line">        score: <span class="number">95</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">&#x27;english&#x27;</span>,</span><br><span class="line">        score: <span class="number">80</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> dis = &#123;</span><br><span class="line">    math: <span class="number">0.5</span>,</span><br><span class="line">    chinese: <span class="number">0.3</span>,</span><br><span class="line">    english: <span class="number">0.2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> res = result.reduce(<span class="function">(<span class="params">accumulator, cur</span>) =&gt;</span> dis[cur.subject] * cur.score + accumulator, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">//加大难度，各国汇率不同，就总价</span></span><br><span class="line"><span class="keyword">var</span> prices = [&#123;</span><br><span class="line">    price: <span class="number">23</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    price: <span class="number">45</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    price: <span class="number">56</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">var</span> rates = &#123;</span><br><span class="line">    us: <span class="string">&#x27;6.5&#x27;</span>,</span><br><span class="line">    eu: <span class="string">&#x27;7.5&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> initialState = &#123;</span><br><span class="line">    usTotal: <span class="number">0</span>,</span><br><span class="line">    euTotal: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="keyword">var</span> res = prices.reduce(<span class="function">(<span class="params">accumulator, cur1</span>) =&gt;</span> <span class="built_in">Object</span>.keys(rates).reduce(<span class="function">(<span class="params">prev2, cur2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(accumulator, cur1, prev2, cur2);</span><br><span class="line">    accumulator[<span class="string">`<span class="subst">$&#123;cur2&#125;</span>Total`</span>] += cur1.price * rates[cur2];</span><br><span class="line">    <span class="keyword">return</span> accumulator;</span><br><span class="line">&#125;, &#123;&#125;), initialState);</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> manageReducers = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">state, item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.keys(rates).reduce(<span class="function">(<span class="params">nextState, key</span>) =&gt;</span> &#123;</span><br><span class="line">            state[<span class="string">`<span class="subst">$&#123;key&#125;</span>Total`</span>] += item.price * rates[key];</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">        &#125;, &#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> res1 = prices.reduce(manageReducers(), initialState);</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br></pre></td></tr></table></figure><h2 id="2-扁平一个二（或者多）维数组"><a href="#2-扁平一个二（或者多）维数组" class="headerlink" title="2.扁平一个二（或者多）维数组"></a>2.扁平一个二（或者多）维数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>],[<span class="number">3</span>,[<span class="number">6</span>],<span class="number">9</span>],[<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>]];</span><br><span class="line"><span class="keyword">const</span> res = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">x,y</span>) =&gt;</span> x.concat(<span class="built_in">Array</span>.isArray(y)?res(y):y),[])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(res(arr))</span><br></pre></td></tr></table></figure><h2 id="3-对象数组去重"><a href="#3-对象数组去重" class="headerlink" title="3.对象数组去重"></a>3.对象数组去重</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hash = &#123;&#125;;</span><br><span class="line">chatlists = chatlists.reduce(<span class="function">(<span class="params">obj,next:<span class="built_in">Object</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> hashId = <span class="string">&#x27;$&#123;next.topic&#125;_$&#123;next.stream_id&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(!hash[hashId])&#123;</span><br><span class="line">    hash[<span class="string">`<span class="subst">$&#123;next.topic&#125;</span>_<span class="subst">$&#123;next.stream_id&#125;</span>`</span>] = <span class="literal">true</span>;</span><br><span class="line">      obj.push(next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;,[]);</span><br></pre></td></tr></table></figure><h2 id="4-compose函数"><a href="#4-compose函数" class="headerlink" title="4.compose函数"></a>4.compose函数</h2><p>redux compose源码实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funs</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(funs.length === <span class="number">0</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">arg</span> =&gt;</span> arg;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(funs.length === <span class="number">1</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> funs[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> funs.reduce(<span class="function">(<span class="params">a,b</span>) =&gt;</span> <span class="function">(<span class="params">...arg</span>) =&gt;</span> a(b(...arg)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="commpose函数特点："><a href="#commpose函数特点：" class="headerlink" title="commpose函数特点："></a>commpose函数特点：</h3><ul><li>参数均为函数，返回值也是函数</li><li>第一个函数接受参数，其他函数接受的上一个函数的返回值</li><li>第一个函数的参数是多元的，其它函数是一元的</li><li>自右向左执行<h4 id="简单实现："><a href="#简单实现：" class="headerlink" title="简单实现："></a>简单实现：</h4>第一步：记录我们传入所有函数的个数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compose = <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> len = args.length           <span class="comment">//记录我们传入所有函数的个数</span></span><br><span class="line">  retunr <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>第二步：利用游标记录该运行的函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compose = <span class="function"><span class="keyword">function</span> (<span class="params">...fns</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> len = fns.length     <span class="comment">//记录我们传入的所有函数的个数</span></span><br><span class="line">  <span class="keyword">var</span> index = len-<span class="number">1</span>       <span class="comment">//游标记录函数执行情况，也作为我们运行fns中的中函数的索引</span></span><br><span class="line">  <span class="keyword">var</span> reslut             <span class="comment">//结果，每次函数执行完成后，向下传递</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">...arg1</span>)</span>&#123;</span><br><span class="line">  --index</span><br><span class="line">    <span class="keyword">return</span> f1.call(<span class="literal">null</span>,reslut)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>第三步：完成代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compose = <span class="function"><span class="keyword">function</span>(<span class="params">...fns</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> len = fns.length         <span class="comment">//记录我们传入所有函数的个数</span></span><br><span class="line">  <span class="keyword">var</span> index = len-<span class="number">1</span>           <span class="comment">//游标记录函数执行情况，也作为我们运行fns中的中函数的索引</span></span><br><span class="line">  <span class="keyword">var</span> reslut                  <span class="comment">//结果，每次函数执行完成后，向下传递</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">...arg1</span>)</span>&#123;</span><br><span class="line">  reslut = fns[index].apply(<span class="built_in">this</span>,arg1)</span><br><span class="line">    <span class="keyword">if</span>(index &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">    index = len-<span class="number">1</span>    </span><br><span class="line">      <span class="keyword">return</span> reslut</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    --index</span><br><span class="line">      <span class="keyword">return</span> f1.call(<span class="literal">null</span>,reslut)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础知识</title>
      <link href="2021/01/20/html-ji-chu-zhi-shi/"/>
      <url>2021/01/20/html-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML基础知识"><a href="#HTML基础知识" class="headerlink" title="HTML基础知识"></a>HTML基础知识</h1><h2 id="HTML结构"><a href="#HTML结构" class="headerlink" title="HTML结构"></a>HTML结构</h2><p>HTML的结构一般包括<code>&lt;head&gt;</code>标签和<code>&lt;body&gt;</code>标签，<code>&lt;head&gt;</code>和<code>&lt;body&gt;</code>这两个标记符分别表示网页的头部和正文。头部中可包含页面的标题、关键词、描述说明等内容，他本身不作为内容显示，但影响网页显示的效果。<code>&lt;body&gt;&lt;/body&gt;</code>当中是网页实际显示的内容，正文标记符又被称为实体标记。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>页面标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>DOCTYPE</code>声明了文档的类型</li><li><code>&lt;html&gt;</code>标签是HTML页面的根元素，该标签的结束标志位<code>&lt;/html&gt;</code>、</li><li><code>&lt;head&gt;</code>标签包含了文档的元数据（<code>meta</code>），如<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>式为utf-8。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 基础new Set</title>
      <link href="2021/01/14/es6-ji-chu-new-set/"/>
      <url>2021/01/14/es6-ji-chu-new-set/</url>
      
        <content type="html"><![CDATA[<h1 id="Es6-基础之-new-set"><a href="#Es6-基础之-new-set" class="headerlink" title="Es6 基础之 new set"></a>Es6 基础之 new set</h1><p>Set对象存储的值总是唯一的<br>Set对象方法</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>add</td><td>添加某个值，返回Set对象本身</td></tr><tr><td>clear</td><td>删除所有的键/值对，没有返回结果</td></tr><tr><td>delete</td><td>删除某个键，返回true、如果删除失败，返回false</td></tr><tr><td>forEach</td><td>对每个元素执行指定操作</td></tr><tr><td>has</td><td>返回一个布尔值，表示某个键是否在当前Set对象之中</td></tr></tbody></table><h2 id="Set对象作用"><a href="#Set对象作用" class="headerlink" title="Set对象作用"></a>Set对象作用</h2><ul><li>数组去重<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">[...new <span class="built_in">Set</span>(arr)];    <span class="comment">// [1,2,3,4,5]</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr)); <span class="comment">//[1,2,3,4,5]</span></span><br><span class="line">[...new <span class="built_in">Set</span>(<span class="string">&#x27;ababbc&#x27;</span>)].join(<span class="string">&#x27;&#x27;</span>);   <span class="comment">//&quot;abc&quot;字符串去重</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Set</span>(<span class="string">&#x27;ice doughnut&#x27;</span>); <span class="comment">//Set(11) &#123;&quot;i&quot;, &quot;c&quot;, &quot;e&quot;, &quot; &quot;, &quot;d&quot;, …&#125;</span></span><br></pre></td></tr></table></figure></li><li>并集<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">var</span> b=<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">var</span> union=<span class="keyword">new</span> <span class="built_in">Set</span>([...a,...b]); <span class="comment">//&#123;1,2,3,4&#125;</span></span><br></pre></td></tr></table></figure></li><li>交集<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">var</span> intersect = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> b.has(x))); <span class="comment">//&#123;2,3&#125;</span></span><br></pre></td></tr></table></figure></li><li>差集<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">var</span> difference  = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> !b.has(x)));<span class="comment">// &#123;1&#125;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6之Array.frome()方法</title>
      <link href="2021/01/14/es6-zhi-array.from-fang-fa/"/>
      <url>2021/01/14/es6-zhi-array.from-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6之Array-from-方法"><a href="#ES6之Array-from-方法" class="headerlink" title="ES6之Array.from()方法"></a>ES6之Array.from()方法</h1><p>Array.from()方法就是将一个类数组对象或者可遍历对象转换成一个真正的数组。<br>那么什么是类数组对象呢？所谓类数组对象，最基本的要求就是具有length属性的对象。</p><h2 id="1-将类数组对象转换为真正的数组："><a href="#1-将类数组对象转换为真正的数组：" class="headerlink" title="1.将类数组对象转换为真正的数组："></a>1.将类数组对象转换为真正的数组：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line"><span class="number">0</span>:<span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line"><span class="number">1</span>:<span class="string">&#x27;22&#x27;</span>,</span><br><span class="line"><span class="number">2</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line"><span class="number">3</span>:[<span class="string">&#x27;jane&#x27;</span>,<span class="string">&#x27;john&#x27;</span>,<span class="string">&#x27;Mary&#x27;</span>],</span><br><span class="line"><span class="string">&#x27;length&#x27;</span>:<span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(arrayLike)</span><br><span class="line"><span class="built_in">console</span>.log(arr)     <span class="comment">//[&#x27;tom&#x27;,&#x27;22&#x27;,&#x27;男&#x27;,[&#x27;jane&#x27;,&#x27;john&#x27;,&#x27;Mary&#x27;]]</span></span><br></pre></td></tr></table></figure><p>那么，如果将上面代码中length属性去掉呢？<br>实践证明，答案会是一个长度为0的空数组。<br>这里将代码再改一下，就是具有length属性，但是对象的属性名不再是数字类型的，而是其他字符串型的，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line"><span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;22&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;friends&#x27;</span>:[<span class="string">&#x27;jane&#x27;</span>,<span class="string">&#x27;john&#x27;</span>,<span class="string">&#x27;Mary&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(arrayLike)</span><br><span class="line"><span class="built_in">console</span>.log(arr)    <span class="comment">//[undefined,undefined,undefined,undefined]</span></span><br></pre></td></tr></table></figure><p>会发现结果长度为4，元素均为undefined的数组<br>由此可见，要将一类数组对象转换为一个真正数组，必须具备一下条件：</p><ul><li>1.该类数组对象必须具有length属性，用于指定数组的长度。如果没有length属性，那么转换后的数组是一个空数组。</li><li>2.该数组对象的属性名必须为数值型或者字符串型的数字。<br><font color = red>ps:该类数组对象的属性名可以加引导，也可以不加引导。</font></li></ul><h2 id="2-将Set结构的数据转换为真正的数组："><a href="#2-将Set结构的数据转换为真正的数组：" class="headerlink" title="2.将Set结构的数据转换为真正的数组："></a>2.将Set结构的数据转换为真正的数组：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>,<span class="number">45</span>,<span class="number">97</span>,<span class="number">9797</span>,<span class="number">564</span>,<span class="number">134</span>,<span class="number">45642</span>]</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(set))   <span class="comment">//[12,45,97,9797,564,134,45642]</span></span><br></pre></td></tr></table></figure><p>Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>,<span class="number">45</span>,<span class="number">97</span>,<span class="number">9797</span>,<span class="number">564</span>,<span class="number">134</span>,<span class="number">45642</span>]</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(set, <span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">1</span>)) <span class="comment">// [ 13, 46, 98, 9798, 565, 135, 45643 ]</span></span><br></pre></td></tr></table></figure><h2 id="3-将字符串转换为数组："><a href="#3-将字符串转换为数组：" class="headerlink" title="3.将字符串转换为数组："></a>3.将字符串转换为数组：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello world!&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(str))  <span class="comment">//[&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;, &quot; &quot;, &quot;w&quot;, &quot;o&quot;, &quot;r&quot;, &quot;l&quot;, &quot;d&quot;, &quot;!&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="4-Array-from参数是一个真正的数组："><a href="#4-Array-from参数是一个真正的数组：" class="headerlink" title="4.Array.from参数是一个真正的数组："></a>4.Array.from参数是一个真正的数组：</h2><p><code>console.log(Array.from([12,45,47,56,213,4654,154]))</code><br>像这种情况，Array.from返回一个一模一样的新数组</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络原理</title>
      <link href="2021/01/05/ji-suan-ji-wang-luo-yuan-li/"/>
      <url>2021/01/05/ji-suan-ji-wang-luo-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络主要指的是TCP-IP协议栈"><a href="#计算机网络主要指的是TCP-IP协议栈" class="headerlink" title="计算机网络主要指的是TCP/IP协议栈"></a>计算机网络主要指的是TCP/IP协议栈</h1><blockquote><p><strong>闲聊</strong></p><blockquote><p>TCP/IP是互联网的基石，互联网时代的最伟大的发明。<br>前端后端都有涉及<br>TCP/IP技术栈有一部分都隐藏于操作系统内核态，总有藏着掖着，老是见不得人，当然容易被遗忘。</p></blockquote></blockquote><blockquote><p><strong>TCP/IP协议体系的认知</strong></p><blockquote><ul><li>一些概念<blockquote><p>内核态<br>用户态<br>应用层（接触较多）<br>数据链路层<br>数据传输对等</p></blockquote></li></ul></blockquote></blockquote><blockquote><p><strong>数据链路层</strong></p><blockquote><ul><li>以太网帧的格式</li><li>MTU（最大传输单元）概念</li><li>ARP协议、RARP协议（即地址解析和逆地址解析）<blockquote><p>一般归入链路层，网络和链路层的中间协议<br>报文格式<br>IP和MAC地址互查<br>ARP缓存</p></blockquote></li></ul></blockquote></blockquote><blockquote><p><strong>网络层</strong></p><blockquote><ul><li>掌握IP首部格式：如16位分片标识、DF不分片标志、MF更多分片标志、13位片偏移，8位生存时间TTL，16位的首部检验和等等</li><li>掌握IP分片</li><li>掌握IP选路（路由表）</li><li>掌握ICMP协议<blockquote><p>报文格式<br>报文的两大分类：查询+交错</p><blockquote><p>2种查询报文+5种差错报文</p></blockquote></blockquote></li></ul></blockquote></blockquote><blockquote><p><strong>传输层</strong></p><blockquote><ul><li>掌握UDP协议：包括特点+首部各个字段</li><li>掌握TCP协议：特点+首部字段+可靠机制</li><li>TCP链接控制机制：三次握手、四次挥手、同时打开、同时关闭、半关闭</li><li>TCP流量控制机制：滑动窗口、慢启动、拥塞避免、快速重传、快速恢复</li><li>TCP超时重传机制：各种定时器（4个）</li></ul></blockquote></blockquote><blockquote><p><strong>应用层</strong></p><blockquote><ul><li>掌握DNS协议</li><li>掌握DNS协议的名字空间</li><li>DNS指针查询（反向查找或逆向解析）基本原理</li><li>DNS缓存<blockquote><p>两条链接：控制连接+数据连接<br>两种工作模式：PASV+PORT<br>各种指令和响应码<br>FTP断点续传、匿名FTP</p></blockquote></li><li>HTTP协议<blockquote><p>报文格式：请求报文+响应报文+各种请求字段+响应头各种字段<br>http状态码</p></blockquote></li><li>HTTPS协议<blockquote><p>https详细握手过程<br>摘要算法、数字签名、数字证书的原理和过程</p></blockquote></li></ul></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组扁平化</title>
      <link href="2021/01/05/shu-zu-bian-ping-hua/"/>
      <url>2021/01/05/shu-zu-bian-ping-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h1><p><strong>数组扁平化是指将多维数组变为一维数组：</strong><br><code>[1,[2,3,[4,5]]]   -----&gt;  [1,2,3,4,5]</code></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="1-reduce"><a href="#1-reduce" class="headerlink" title="1.reduce"></a>1.reduce</h3><p>遍历数组每一项，若值为数组则递归遍历，否则concat。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">result,item</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> result.concat(<span class="built_in">Array</span>.isArray(item)?flattten(item):item);</span><br><span class="line">&#125;,[]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reduce是数组的一种方法，它接受一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算一个值。<br>reduce包含两个参数：回调函数，传给total的初始值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求数组的各项值相加的和</span></span><br><span class="line">arr.reduce(<span class="function">(<span class="params">total,item</span>)=&gt;</span>&#123; <span class="comment">//total为之前的计算结果，item为数组的各项值</span></span><br><span class="line"><span class="keyword">return</span> total+item;</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="2-toString-amp-split"><a href="#2-toString-amp-split" class="headerlink" title="2.toString&amp;split"></a>2.toString&amp;split</h3><p>调用数组的toString方法，将数组变为字符串然后再用split分割还原为数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr.toString().split(<span class="string">&#x27;,&#x27;</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Number</span>(item);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为split分割后形成的数组的每一项值为字符串，所以需要用一个map方法遍历数组将其每一项转换为数值型。</p><h3 id="3-join-amp-split"><a href="#3-join-amp-split" class="headerlink" title="3.join&amp;split"></a>3.join&amp;split</h3><p>和上面的toString一样，join也可以将数组转换为字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr.join(<span class="string">&#x27;,&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>).map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> paresInt(item);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-递归"><a href="#4-递归" class="headerlink" title="4.递归"></a>4.递归</h3><p>递归的遍历每一项，若为数组则继续遍历，否则concat</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> res = [];</span><br><span class="line">arr.map(<span class="function"><span class="params">item</span> =&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(item))&#123;</span><br><span class="line">res = res.concat(flatten(item));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">res.push(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-扩展运算符"><a href="#5-扩展运算符" class="headerlink" title="5.扩展运算符"></a>5.扩展运算符</h3><p>es6的扩展运算符能将二维数组变为一维。<br><code>[].concat(...[1,2,3,[4,5]]);     //[1,2,3,4,5]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(arr.some(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Array</span>.isArray(item)))&#123;</span><br><span class="line">arr=[].concat(...arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-使用flat"><a href="#6-使用flat" class="headerlink" title="6.使用flat()"></a>6.使用flat()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">const</span> arr1 = arr.flat(<span class="literal">Infinity</span>);</span><br><span class="line"><span class="keyword">return</span> arr1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然说写了5种方法，但是核心的也只有一个：<br>遍历数arr,若arr[i]为数组则递归遍历，直至arr[i]不为数组后与之前的结果从concat。</p>]]></content>
      
      
      <categories>
          
          <category> JavaSctipt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS定位详解</title>
      <link href="2021/01/02/css-ding-wei-xiang-jie/"/>
      <url>2021/01/02/css-ding-wei-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS定位详解"><a href="#CSS定位详解" class="headerlink" title="CSS定位详解"></a>CSS定位详解</h1><p><strong>CSS有个重要的基本属性，前端开发必须掌握：<code>display</code> 和<code>position</code></strong><br><code>display</code>属性指定网页的布局。两个重要的布局：弹性布局<code>flex</code>和网格布局<code>grid</code>。</p><h2 id="一、position属性的作用"><a href="#一、position属性的作用" class="headerlink" title="一、position属性的作用"></a>一、position属性的作用</h2><p><code>position</code>属性用来指定一个元素在网页上的位置，一共有5种定位方式，即<code>position</code>属性的主要五个值。</p><ul><li>static</li><li>relative</li><li>fixed</li><li>absolute</li><li>sticky</li></ul><h2 id="二、static属性值"><a href="#二、static属性值" class="headerlink" title="二、static属性值"></a>二、static属性值</h2><p><code>static</code>是<code>position</code>属性的默认值。如果省略<code>position</code>属性，浏览器就认为该元素是<code>static</code>定位。<br><strong>注意：<code>static</code>定位所导致的元素位置，是浏览器自主决定的，所以这时<code>top</code>、<code>bootom</code>、<code>left</code>、<code>right</code>这四个属性无效。</strong></p><h2 id="三、relative，absolute，fixed"><a href="#三、relative，absolute，fixed" class="headerlink" title="三、relative，absolute，fixed"></a>三、relative，absolute，fixed</h2><p><code>relative</code>、<code>absolute</code>、<code>fixed</code>这三个属性值有一个共同点，都是对于某个基点的定位，不同之处仅仅在于基点不同。所以，只要理解了它们的基点是什么，就很容易掌握这三个属性值。<br>这三种定位都不会对其他元素位置产生影响，因此元素之间可能 产生重叠。</p><h3 id="3-1-relative属性值"><a href="#3-1-relative属性值" class="headerlink" title="3.1 relative属性值"></a>3.1 relative属性值</h3><p><code>relative</code>表示，相对于默认位置（即<code>static</code>时的位置）进行偏移，即定位基点是元素的默认位置。<br>它必须搭配<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>这四个属性一起使用，用来指定偏移的方向和距离。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.a</span>&#123;</span></span><br><span class="line">            width: 60px;</span><br><span class="line">            height: 60px;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.b</span>&#123;</span></span><br><span class="line">            width: 60px;</span><br><span class="line">            height: 60px;</span><br><span class="line">            background-color: rgb(47, 47, 196);</span><br><span class="line">            float: left;</span><br><span class="line">            position: relative;</span><br><span class="line">            top: 30px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.c</span>&#123;</span></span><br><span class="line">            width: 60px;</span><br><span class="line">            height: 60px;</span><br><span class="line">            background-color: red;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span>a<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span>b<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c&quot;</span>&gt;</span>c<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/510079/1608296918973-8fe5a7c1-e325-492f-85a2-e981336508f3.png#align=left&display=inline&height=163&margin=%5Bobject%20Object%5D&name=image.png&originHeight=325&originWidth=546&size=26548&status=done&style=none&width=273" alt="image.png"><br>上面代码中，<code>div</code>元素从默认位置向下偏移<code>30px</code>(即距离顶部<code>30px</code>)。</p><h3 id="3-2-absolute属性值"><a href="#3-2-absolute属性值" class="headerlink" title="3.2 absolute属性值"></a>3.2 absolute属性值</h3><p><code>absolute</code>表示，相对于上级元素（一般是父级元素）进行偏移，即定位基点是父元素。<br>它有一个重要的限制条件：定位基点（一般是父级元素）不能是<code>static</code>定位，否则定位基点就会变成整个网页的根元素<code>html</code>。另外，<code>absolute</code>定位也必须搭配<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>这四个属性一起使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.father</span>&#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.son</span>&#123;</span></span><br><span class="line">            width: 60px;</span><br><span class="line">            height: 60px;</span><br><span class="line">            background-color: rgb(47, 47, 196);</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 40px;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/510079/1608296878970-7d3785a1-9c44-4709-a3f5-157b0afdfad6.png#align=left&display=inline&height=156&margin=%5Bobject%20Object%5D&name=image.png&originHeight=450&originWidth=722&size=30724&status=done&style=none&width=250" alt="image.png"><br>上面代码中，父元素是<code>relative</code>定位，子元素是<code>absolute</code>定位，所以子元素的定位基点是父元素，相对于父元素的顶部向下偏移<code>40px</code>。如果父元素是<code>static</code>定位，上例的子元素就是距离网页的顶部向下偏移<code>40px</code>。<br><strong>注意，<code>absolute</code>定位的元素会被“正常页面流”忽略，即在“正常页面流”中，该元素所占空间为零，周边元素不受影响。</strong></p><h3 id="3-3-fixed-属性值"><a href="#3-3-fixed-属性值" class="headerlink" title="3.3 fixed 属性值"></a>3.3 fixed 属性值</h3><p><code>fixed</code>表示，相对于视口（浏览器窗口）进行偏移，即定位基点是浏览器窗口。这会导致元素的位置不随页面滚动而变化，好像固定在网页上一样。<br>它如果搭配<code>top</code>，<code>bottom</code>，<code>left</code>,<code>right</code>这四个属性一起使用，表示元素的初始位置是基于视口计算的，否则初始位置就是元素的默认位置。</p><h2 id="四、sticky-属性值"><a href="#四、sticky-属性值" class="headerlink" title="四、sticky 属性值"></a>四、sticky 属性值</h2><p><code>sticky</code>跟前面四个属性值都不一样，它会产生动态效果，很像<code>relative</code>和<code>fixed</code>的结合：一些时候是<code>relative</code>定位（定位基点是自身默认位置），另一些时候自动变成<code>fixed</code>定位（定位基点是视口）。<br>因此，它能够形成“动态固定”的效果。比如，网页的搜索工具栏，初始加载时在自己的默认位置（<code>relative</code>定位）。<br>页面向下滚动时，工具栏变成固定位置，始终停留在页面头部（<code>fixed</code>定位）。<br>等到页面重新向上滚动回到原位，工具栏也会回到默认位置。<br><code>sticky</code>生效的前提是，必须搭配<code>top</code>,<code>bootom</code>,<code>left</code>,<code>right</code>这四个属性一起使用，不能省略，否则等同于<code>relative</code>定位，不产生‘动态固定’的效果。原因是这四个属性用来定义‘偏移距离’，浏览器把它当做<code>sticky</code>的生效门槛。<br>它的具体规则是，当页面滚动，父元素开始脱离视口时（即部分完全不可见），<code>fixed</code>定位自动切换回<code>relative</code>定位。<br>请看一下示例代码。（<strong>注意：除了已被淘汰的IE以外，其他浏览器目前都支持<code>sticky</code>。但是，Safari浏览器需要加上浏览器前缀<code>-webkit-</code>。</strong>）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#toolbar&#123;</span><br><span class="line">position:-webkit-sticky;/*safari浏览器*/</span><br><span class="line">position:sticky;       /*其他浏览器*/</span><br><span class="line">top:20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，页面向下滚动时，<code>#toolbar</code>的父元素开始脱离视口，一旦视口的顶部与<code>#toolbar</code>的距离小于<code>20px</code>(门槛值），<code>#toolbar</code>就会自动变成<code>fixed</code>定位，保持与视口顶部20px的距离。页面会继续向下滚动，父元素彻底离开视口（即整个父元素完全不可见），<code>#toolbar</code>恢复成<code>relative</code>定位。</p><h2 id="五、sticky-的应用"><a href="#五、sticky-的应用" class="headerlink" title="五、sticky 的应用"></a>五、sticky 的应用</h2><p><code>sticky</code>定位可以实现一些很有用的效果。除了上面提到“动态固定”效果，还有以下用法。</p><h3 id="5-1-堆叠效果"><a href="#5-1-堆叠效果" class="headerlink" title="5.1 堆叠效果"></a>5.1 堆叠效果</h3><p>堆叠效果（stacking）指的是页面滚动时，下方的元素覆盖上方的元素。下面是一个图片堆叠的例子，下方的图片会随着页面滚动，覆盖上方图片<br>Html代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;pic1.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;pic2.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;pic3.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">position</span>:sticky;</span><br><span class="line"><span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-表格的表头锁定"><a href="#5-2-表格的表头锁定" class="headerlink" title="5.2 表格的表头锁定"></a>5.2 表格的表头锁定</h3><p>Html代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>颜色r<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>Purple<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，<code>sticky</code>必须设在<code>&lt;th&gt;</code>元素上面，不能设在<code>&lt;thead&gt;</code>和<code>&lt;tr&gt;</code>元素，因为这两个元素没有<code>reltive</code>定位，也就无法产生<code>sticky</code>效果。</p><p>（end）</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript变量、数组</title>
      <link href="2021/01/02/javascript-shu-zu/"/>
      <url>2021/01/02/javascript-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="JS变量、数组"><a href="#JS变量、数组" class="headerlink" title="JS变量、数组"></a>JS变量、数组</h1><h2 id="一，变量"><a href="#一，变量" class="headerlink" title="一，变量"></a>一，变量</h2><p>1.ECMAScript的变量是松散型变量。</p><p>松散型变量：可以用来保存任何类型的数据，换句话来说，每个变量仅仅是一个用于保存的占位符而而已。</p><p>定义变量要是用var操作符。（var是一个关键字），后跟变量名（既是一个标识符）。<br>如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message;</span><br></pre></td></tr></table></figure><p>改代码就是定义了一个名字为message的变量，该变量可以保存任何类型的数据。<br><strong>注意：</strong><em>既用var操作符定义的变量将成为该变量的作用域的局部变量。</em><br>如果在函数中使用var定义一个变量，那么这个变量在函数退出后就会被销毁。<br>例如<em>;</em><br>错误例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> message=<span class="string">&quot;hi&quot;</span>;<span class="comment">//局部变量</span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line">alert(message);<span class="comment">//错误</span></span><br></pre></td></tr></table></figure><p>正确例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> message=<span class="string">&quot;hi&quot;</span>;</span><br><span class="line">  alert(message);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><h2 id="二-数据类型"><a href="#二-数据类型" class="headerlink" title="二.数据类型"></a>二.数据类型</h2><p>1.ECMAScript中有<strong>5中简单的数据类型（也称为基本数据类型）</strong>；<br><strong>5种数据类型:Undefind,NULL,Boolean,Number,String.</strong><br><strong>还有一种复杂的数据类型：</strong>Object，（Object 本质上是由一组无序的名值对组成的。ECMAScript<br>不支持任何创建自定义类型的机制，而所有值最终都将是上述 6 种数据类型之一。）<br>1.注意：对为声明的变量，执行typeof操作符都返回了undefined值。<br><em>即便未初始化的变量会自动被赋予 undefined 值，但显式地初始化变量依然是</em><br><em>明智的选择。如果能够做到这一点，那么当 typeof 操作符返回 “undefined” 值时，</em><br><em>我们就知道被检测的变量还没有被声明，而不是尚未初始化。</em><br>如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message; <span class="comment">// 这个变量声明之后默认取得了 undefined 值</span></span><br><span class="line"><span class="comment">// 下面这个变量并没有声明</span></span><br><span class="line"><span class="comment">// var age</span></span><br><span class="line">alert(<span class="keyword">typeof</span> message); <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line">alert(<span class="keyword">typeof</span> age); <span class="comment">// &quot;undefined&quot;</span></span><br></pre></td></tr></table></figure><h2 id="三-字符串"><a href="#三-字符串" class="headerlink" title="三.字符串"></a>三.字符串</h2><p>1.要把多个字符串连起来可以用+号链接；<br>2.如果变量需要连接，用+号就比较麻烦，ES6新增一种模板字符串，表示方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">&quot;小明&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> message=<span class="string">&#x27;你好,$&#123;name&#125;,你今年$&#123;age&#125;岁了！&#x27;</span>;</span><br><span class="line">alert(message);</span><br></pre></td></tr></table></figure><h4 id="3-toUpperCase"><a href="#3-toUpperCase" class="headerlink" title="3.toUpperCase"></a>3.toUpperCase</h4><p>toUpperCase()把一个字符串全部变成大写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">s.toUpperCase();<span class="comment">//\返回“HELLO”</span></span><br></pre></td></tr></table></figure><h4 id="4-toLowerCase"><a href="#4-toLowerCase" class="headerlink" title="4.toLowerCase"></a>4.toLowerCase</h4><p>toLowerCAse()把一个字符串全变成小写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="string">&quot;HELLO&quot;</span>;</span><br><span class="line">s.toLowerCase();<span class="comment">//返回“hello”</span></span><br></pre></td></tr></table></figure><h4 id="5-indexOf"><a href="#5-indexOf" class="headerlink" title="5.indexOf"></a>5.indexOf</h4><p>indexOf()会搜索指定的字符串出现的位置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="string">&quot;hello,word&quot;</span>;</span><br><span class="line">s.indexOf(<span class="string">&quot;world&quot;</span>);<span class="comment">//返回7</span></span><br><span class="line">s.indexOf(<span class="string">&quot;World&quot;</span>);<span class="comment">//没有找到的字符串，返回-1</span></span><br></pre></td></tr></table></figure><h4 id="6-substring"><a href="#6-substring" class="headerlink" title="6.substring"></a>6.substring</h4><p>substring()返回指定索引区间的字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="string">&quot;hello,word&quot;</span>;</span><br><span class="line">s.substring(<span class="number">0</span>,<span class="number">5</span>);<span class="comment">//从索引0开始到5（不包括5），返回“hello”</span></span><br><span class="line">s.substring(<span class="number">7</span>);<span class="comment">//从索引7开始到结束，返回“world”</span></span><br></pre></td></tr></table></figure><h2 id="四-数组"><a href="#四-数组" class="headerlink" title="四.数组"></a>四.数组</h2><p>1.在js中数组可以包含任何类型的数据类型，并通过索引来访问每个元素。<br>取得他的长度直接访问length属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="string">&quot;hello&quot;</span>,<span class="literal">null</span>,<span class="literal">true</span>];</span><br><span class="line">arr.length;<span class="comment">//6</span></span><br></pre></td></tr></table></figure><p>注意：如果给arr.length附一个新的值会导致arr大小变化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.length; <span class="comment">// 3</span></span><br><span class="line">arr.length = <span class="number">6</span>;</span><br><span class="line">arr; <span class="comment">// arr变为[1, 2, 3, undefined, undefined, undefined]</span></span><br><span class="line">arr.length = <span class="number">2</span>;</span><br><span class="line">arr; <span class="comment">// arr变为[1, 2]</span></span><br></pre></td></tr></table></figure><h4 id="2-indexOf"><a href="#2-indexOf" class="headerlink" title="2.indexOf"></a>2.indexOf</h4><p>与String类似，arr也可以通过indexOf()来搜索一个指定的元素的位置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="string">&#x27;30&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>];</span><br><span class="line">arr.indexOf(<span class="number">10</span>); <span class="comment">// 元素10的索引为0</span></span><br><span class="line">arr.indexOf(<span class="number">20</span>); <span class="comment">// 元素20的索引为1</span></span><br><span class="line">arr.indexOf(<span class="number">30</span>); <span class="comment">// 元素30没有找到，返回-1</span></span><br><span class="line">arr.indexOf(<span class="string">&#x27;30&#x27;</span>); <span class="comment">// 元素&#x27;30&#x27;的索引为2</span></span><br></pre></td></tr></table></figure><h4 id="3-slice"><a href="#3-slice" class="headerlink" title="3.slice"></a>3.slice</h4><p>slice()就是对应String的substring（）版本，他截取arr的部分元素，然后返回一个新的arr：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>];</span><br><span class="line">arr.slice(<span class="number">0</span>, <span class="number">3</span>); <span class="comment">// 从索引0开始，到索引3结束，但不包括索引3: [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span></span><br><span class="line">arr.slice(<span class="number">3</span>); <span class="comment">// 从索引3开始到结束: [&#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;]</span></span><br></pre></td></tr></table></figure><p>注意：slice()的起止包括开始不包括结束。<br>如果不给slice（）传递参数，他就会从头到结尾截取所有的元素。利用这一点，可以容易的复制一个arr:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> aCopy = arr.slice();</span><br><span class="line">aCopy; <span class="comment">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;]</span></span><br><span class="line">aCopy === arr; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="4-push和pop"><a href="#4-push和pop" class="headerlink" title="4.push和pop"></a>4.push和pop</h4><p>push()向arr的末尾添加若干元素，<br>pop()则把arr得最后一个元素删掉：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.push(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>); <span class="comment">// 返回Array新的长度: 4</span></span><br><span class="line">arr; <span class="comment">// [1, 2, &#x27;A&#x27;, &#x27;B&#x27;]</span></span><br><span class="line">arr.pop(); <span class="comment">// pop()返回&#x27;B&#x27;</span></span><br><span class="line">arr; <span class="comment">// [1, 2, &#x27;A&#x27;]</span></span><br><span class="line">arr.pop(); arr.pop(); arr.pop(); <span class="comment">// 连续pop 3次</span></span><br><span class="line">arr; <span class="comment">// []</span></span><br><span class="line">arr.pop(); <span class="comment">// 空数组继续pop不会报错，而是返回undefined</span></span><br><span class="line">arr; <span class="comment">// []</span></span><br></pre></td></tr></table></figure><h4 id="5-unshift和shift"><a href="#5-unshift和shift" class="headerlink" title="5.unshift和shift"></a>5.unshift和shift</h4><p>unshift()在arr头部添加若干元素。<br>shift()在arr的第一个元素删掉。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.unshift(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>); <span class="comment">// 返回Array新的长度: 4</span></span><br><span class="line">arr; <span class="comment">// [&#x27;A&#x27;, &#x27;B&#x27;, 1, 2]</span></span><br><span class="line">arr.shift(); <span class="comment">// &#x27;A&#x27;</span></span><br><span class="line">arr; <span class="comment">// [&#x27;B&#x27;, 1, 2]</span></span><br><span class="line">arr.shift(); arr.shift(); arr.shift(); <span class="comment">// 连续shift 3次</span></span><br><span class="line">arr; <span class="comment">// []</span></span><br><span class="line">arr.shift(); <span class="comment">// 空数组继续shift不会报错，而是返回undefined</span></span><br><span class="line">arr; <span class="comment">// []</span></span><br></pre></td></tr></table></figure><h4 id="6-sort"><a href="#6-sort" class="headerlink" title="6.sort"></a>6.sort</h4><p>sort()可以对当前arr进行排序，他会直接修改arr的元素位置，直接调用时，按照默认顺序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;A&#x27;</span>];</span><br><span class="line">arr.sort();</span><br><span class="line">arr; <span class="comment">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="7-reverse"><a href="#7-reverse" class="headerlink" title="7.reverse"></a>7.reverse</h4><p>reverse()把整个arr的元素给掉个个，颠倒一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>];</span><br><span class="line">arr.reverse(); </span><br><span class="line">arr; <span class="comment">// [&#x27;three&#x27;, &#x27;two&#x27;, &#x27;one&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="8-splice"><a href="#8-splice" class="headerlink" title="8.splice"></a>8.splice</h4><p>splice()可以从指定的索引开始删除若干个元素，然后从该位置添加若干个元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;Microsoft&#x27;</span>, <span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Yahoo&#x27;</span>, <span class="string">&#x27;AOL&#x27;</span>, <span class="string">&#x27;Excite&#x27;</span>, <span class="string">&#x27;Oracle&#x27;</span>];</span><br><span class="line"><span class="comment">// 从索引2开始删除3个元素,然后再添加两个元素:</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>); <span class="comment">// 返回删除的元素 [&#x27;Yahoo&#x27;, &#x27;AOL&#x27;, &#x27;Excite&#x27;]</span></span><br><span class="line">arr; <span class="comment">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Google&#x27;, &#x27;Facebook&#x27;, &#x27;Oracle&#x27;]</span></span><br><span class="line"><span class="comment">// 只删除,不添加:</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// [&#x27;Google&#x27;, &#x27;Facebook&#x27;]</span></span><br><span class="line">arr; <span class="comment">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Oracle&#x27;]</span></span><br><span class="line"><span class="comment">// 只添加,不删除:</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>); <span class="comment">// 返回[],因为没有删除任何元素</span></span><br><span class="line">arr; <span class="comment">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Google&#x27;, &#x27;Facebook&#x27;, &#x27;Oracle&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="9-concat"><a href="#9-concat" class="headerlink" title="9.concat"></a>9.concat</h4><p>concat()把当前的arr和另一个arr链接起来，并返回新的arr：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> added = arr.concat([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">added; <span class="comment">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3]</span></span><br><span class="line">arr; <span class="comment">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span></span><br></pre></td></tr></table></figure><p>注意：concat()并没有修改当前的arr，反而返回了一个新的arr。<br>实际上，concat()方法可以接受任意个元素和arr，并自动吧arr拆开，然后全部添加到新的arr里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line">arr.concat(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]); <span class="comment">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h4 id="10-join"><a href="#10-join" class="headerlink" title="10.join"></a>10.join</h4><p>join()把当前的arr的每个元素都用指定的字符串链接起来，然后返回链接后的字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.join(<span class="string">&#x27;-&#x27;</span>); <span class="comment">// &#x27;A-B-C-1-2-3&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="11-多维数组"><a href="#11-多维数组" class="headerlink" title="11.多维数组"></a>11.多维数组</h4><p>如果数组的某个元素又是一个arr，则可以形成多维数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.join(<span class="string">&#x27;-&#x27;</span>); <span class="comment">// &#x27;A-B-C-1-2-3&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="12-filter"><a href="#12-filter" class="headerlink" title="12.filter"></a>12.filter</h4><p>把超过数组中超过2000的去掉，filter主要是返回了一个新的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1500</span>,<span class="number">1200</span>,<span class="number">2000</span>,<span class="number">2100</span>,<span class="number">1800</span>];</span><br><span class="line"><span class="keyword">var</span> newArr=arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &lt; <span class="number">2000</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTMLDOM</title>
      <link href="2021/01/02/htmldom/"/>
      <url>2021/01/02/htmldom/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-DOM-简介"><a href="#HTML-DOM-简介" class="headerlink" title="HTML DOM 简介"></a>HTML DOM 简介</h1><p><strong>HTML DOM定义了访问和操作HTML文档标准</strong></p><p>如果想要学习该知识用该具备的知识：</p><ul><li>HTML</li><li>CSS</li><li>JavaScript</li></ul><h1 id="什么是DOM？"><a href="#什么是DOM？" class="headerlink" title="什么是DOM？"></a>什么是DOM？</h1><p><strong>DOM是W3C（万维网联盟）的标准。</strong></p><p>DOM定义了访问HTML和XML文档的标准：</p><p>“W3C文档对象模型（DOM）是中立于平台和语言的接口，它允许程序和脚本动态地访问和更新文档的内容、结构和样式。”</p><p>W3C DOM标准被分为3个不同的部分：</p><ul><li>核心DOM - 针对任何结构化文档的标准模型</li><li>XML DOM - 针对XML文档的标准模型</li><li>HTML DOM - 针对HTML文档的标准模型</li></ul><h1 id="什么是HTML-DOM？"><a href="#什么是HTML-DOM？" class="headerlink" title="什么是HTML DOM？"></a>什么是HTML DOM？</h1><p>HTML DOM是：</p><ul><li>HTML的标准对象模型</li><li>HTML的标准编程接口</li><li>W3C标准</li></ul><p>HTML DOM定义了所有HTML元素的<strong>对象</strong>和<strong>属性</strong>，以及访问他们的<strong>方法</strong>。</p><p><strong>HTML DOM是关于如何获取、修改、添加或删除HTML元素的标准。</strong></p><h1 id="HTML-DOM节点"><a href="#HTML-DOM节点" class="headerlink" title="HTML DOM节点"></a>HTML DOM节点</h1><p><strong>在HTML DOM中，所有事物都是节点。DOM是被视为节点树的HTML。</strong></p><h2 id="DOM节点"><a href="#DOM节点" class="headerlink" title="DOM节点"></a>DOM节点</h2><p>根据W3C的HTML DOM标准，HTML文档中的所有内容都是节点：</p><ul><li>整个文档是一个文档节点</li><li>每个HTML元素是元素节点</li><li>HTML元素内的文本是文本节点</li><li>每个HTML属性是属性节点</li><li>注释是注释节点</li></ul><h2 id="HTML-DOM节点树"><a href="#HTML-DOM节点树" class="headerlink" title="HTML DOM节点树"></a>HTML DOM节点树</h2><p>HTML DOM将HTML文档视作树结构，这种接否被称为<strong>节点树：</strong></p><p><strong>HTML DOM Tree实例</strong></p><p><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://www.w3school.com.cn/i/ct_htmltree.gif#alt=HTML%20DOM"></p><p>通过HTML DOM，树中的所有节点均可通过JavaScript进行访问。所有HTML元素（节点）均可被修改，也可以被创建和删除。</p><h2 id="节点父、子和同胞"><a href="#节点父、子和同胞" class="headerlink" title="节点父、子和同胞"></a>节点父、子和同胞</h2><p>节点树中的节点彼此拥有层级关系。</p><p>父（parent）、子（child）和同胞（sibling）等术语用于描述这些关系。父节点拥有子节点。同级的子节点被称为同胞节点（兄弟或姐妹）。</p><ul><li>在节点树中，顶端节点被称为根（root）</li><li>每个节点都有父节点、除了根节点（他没有父节点）</li><li>一个节点可拥有任意数量的子</li><li>同胞是拥有形同父节点的节点</li></ul><p>树的一部分，以及节点之间的关系：</p><p><img src= "https://cdn.jsdelivr.net/gh/521129/Jsd@main/img/loading.gif" data-lazy-src="https://www.w3school.com.cn/i/dom_navigate.gif#alt=%E8%8A%82%E7%82%B9%20%E5%85%B3%E7%B3%BB"></p><p><strong>看下面的HTML代码片段：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM 教程<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>第一课<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的HTML中：</p><ul><li><p>节点没有父节点；它是根节点</p></li><li><p>和的父节点是节点</p></li><li><p>文本节点”Hello world!”的父节点是节点</p></li></ul><p>并且：</p><ul><li> 节点拥有两个子节点：和</li><li>节点拥有一个子节点：节点</li><li>&lt;title&gt;节点也拥有一个子节点：文本节点”DOM教程”</li><li>&lt;h1&gt;和节点是同胞节点，同时也是的子节点</li></ul><h1 id="HTML-DOM-方法"><a href="#HTML-DOM-方法" class="headerlink" title="HTML DOM 方法"></a>HTML DOM 方法</h1><p><strong>方法是我们可以在节点（HTML元素）上执行的动作。</strong></p><h2 id="编程接口"><a href="#编程接口" class="headerlink" title="编程接口"></a>编程接口</h2><p>可以通过JavaScript（以及其他编程语言）对HTML DOM进行访问。</p><p>所有HTML元素被定义为对象，而编程接口则是对象方法和对象属性。</p><p>方法是您能够执行的动作（比如添加或修改元素）</p><p>属性是您能够获取或设置的值（比如节点的名称或内容）。</p><h3 id="getElementById-方法"><a href="#getElementById-方法" class="headerlink" title="getElementById()方法"></a>getElementById()方法</h3><p>getElementById()方法返回带有指定ID的元素：</p><p><strong>例子</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element=<span class="built_in">document</span>.getElementById(<span class="string">&quot;intro&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="HTML-DOM对象-方法和属性"><a href="#HTML-DOM对象-方法和属性" class="headerlink" title="HTML DOM对象 - 方法和属性"></a>HTML DOM对象 - 方法和属性</h3><p>一些常用的HTML DOM方法：</p><ul><li>getElementById(id) - 获取带有指定ID的节点（元素）</li><li>appendChild(node) - 插入新的子节点（元素）</li><li>removeChild(node) - 删除子节点（元素）</li></ul><p>一些常用的HTML DOM属性：</p><ul><li>innerHTML - 节点（元素）的文本值</li><li>parentNode - 节点（元素）的父节点</li><li>childNodes - 节点（元素）的子节点</li><li>attribute - 节点（元素）的属性节点</li></ul><h2 id="一些DOM对象方法"><a href="#一些DOM对象方法" class="headerlink" title="一些DOM对象方法"></a>一些DOM对象方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>getElementById()</td><td>返回带有指定ID的元素</td></tr><tr><td>getElementByTagName()</td><td>返回包含带有指定标签名称的所有元素的节点列表（集合/节点数组）。</td></tr><tr><td>getElementByClassName()</td><td>返回包含带有指定雷鸣的所有的节点列表</td></tr><tr><td>appendChild()</td><td>把新的子节点添加到指定节点。</td></tr><tr><td>removeChild()</td><td>删除子节点 。</td></tr><tr><td>replaceChild()</td><td>替换子节点</td></tr><tr><td>insertBefore()</td><td>在指定的子节点前面插入新的子节点</td></tr><tr><td>createAttribute()</td><td>创建属性节点</td></tr><tr><td>createElement()</td><td>创建元素节点</td></tr><tr><td>createTextNode()</td><td>创建文本节点</td></tr><tr><td>getAttribute()</td><td>返回指定属性值</td></tr><tr><td>setAttribute()</td><td>把指定属性设置或修改为指定的值</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript数组去重</title>
      <link href="2020/12/30/javascript-shu-zu-qu-chong/"/>
      <url>2020/12/30/javascript-shu-zu-qu-chong/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript数组去重"><a href="#JavaScript数组去重" class="headerlink" title="JavaScript数组去重"></a>JavaScript数组去重</h1><p>数组去重，一般都是在面试题上看到，一般是要求手写数组去重方法的代码。如果被提问到数组去重的方法有哪些？如果你能回答出十种方法，面试官可能会对你刮目相看。<br>在真实的项目中碰到的数组去重，一般都是后台去处理，很好让前端处理数组去重。虽然日常项目用到的概率比降低，但还是需要了解一下，以防面试的时候可能回被问到。</p><h2 id="数组去重方法"><a href="#数组去重方法" class="headerlink" title="数组去重方法"></a>数组去重方法</h2><h3 id="一、利用ES6-Set去重（ES6中最常用）"><a href="#一、利用ES6-Set去重（ES6中最常用）" class="headerlink" title="一、利用ES6 Set去重（ES6中最常用）"></a>一、利用ES6 Set去重（ES6中最常用）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr))</span><br><span class="line"><span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;]</span></span><br></pre></td></tr></table></figure><p><strong>注：不考虑兼容性，这种去重的方法代码最少。这种方法还是无法去掉“{}”空对象，后面的高级方法会添加去掉重复的“{}”的方法。</strong></p><h3 id="二、利用for嵌套for，然后splice去重（ES5中最常用）"><a href="#二、利用for嵌套for，然后splice去重（ES5中最常用）" class="headerlink" title="二、利用for嵌套for，然后splice去重（ES5中最常用）"></a>二、利用for嵌套for，然后splice去重（ES5中最常用）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>;j&lt;arr.length;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]==arr[j])&#123;</span><br><span class="line">arr.splice(j,<span class="number">1</span>);</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">//[1, &quot;true&quot;, 15, false, undefined, NaN, NaN, &quot;NaN&quot;, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]     //NaN和&#123;&#125;没有去重，两个null直接消失了</span></span><br></pre></td></tr></table></figure><p><strong>双层循环，外层循环元素，内层循环时比较值。值相同时，则删除这个值。</strong></p><h3 id="三、利用indexOf去重"><a href="#三、利用indexOf去重" class="headerlink" title="三、利用indexOf去重"></a>三、利用indexOf去重</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">Array</span>.isArray(arr))&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;不是数组&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> array=[];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(array.indexOf(arr[i])==-<span class="number">1</span>)&#123;</span><br><span class="line">array.push(arr[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]  //NaN、&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><p><strong>新建一个空的结果数组，for循环原数组，判断结果数组是否存在当前元素，如果有相同的值则跳过，不相同则push进树组。</strong></p><h3 id="四、利用sort"><a href="#四、利用sort" class="headerlink" title="四、利用sort()"></a>四、利用sort()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">Array</span>.isArray(arr))&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;不是数组&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">arr = arr.sort()</span><br><span class="line"><span class="keyword">var</span> array = [arr[<span class="number">0</span>]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">1</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]!==arr[i-<span class="number">1</span>])&#123;</span><br><span class="line">array.push(arr[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr))</span><br><span class="line"><span class="comment">// [0, 1, 15, &quot;NaN&quot;, NaN, NaN, &#123;…&#125;, &#123;…&#125;, &quot;a&quot;, false, null, true, &quot;true&quot;, undefined]      //NaN、&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><p><strong>利用sort()排序方法，然后根据排序后的结果进行遍历及相邻元素比对。</strong></p><h3 id="五、利用includes"><a href="#五、利用includes" class="headerlink" title="五、利用includes"></a>五、利用includes</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">Array</span>.isArray(arr))&#123;</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array= [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!array.includes(arr[i]))&#123;</span><br><span class="line">    array.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr))</span><br><span class="line"><span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]     //&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><h3 id="六、利用hasOwnProperty"><a href="#六、利用hasOwnProperty" class="headerlink" title="六、利用hasOwnProperty"></a>六、利用hasOwnProperty</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> obj.hasOwnProperty(<span class="keyword">typeof</span> item+item)?fasle : (obj[<span class="keyword">typeof</span> item + item]=<span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="built_in">console</span>.log(unique(arr))</span><br><span class="line"><span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;]   //所有的都去重了</span></span><br></pre></td></tr></table></figure><p><strong>利用hasOwnPeoperty判断是否存在对象属性</strong></p><h3 id="七、利用filter"><a href="#七、利用filter" class="headerlink" title="七、利用filter"></a>七、利用filter</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</span><br><span class="line"><span class="comment">//当前元素，在原始数组中的第一个索引==当前索引，否则返回当前元素</span></span><br><span class="line"><span class="keyword">return</span> arr.indexOf(item,<span class="number">0</span>)===index;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr))</span><br><span class="line"><span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="八、利用递归去重"><a href="#八、利用递归去重" class="headerlink" title="八、利用递归去重"></a>八、利用递归去重</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> array=arr;</span><br><span class="line"><span class="keyword">var</span> len=array.length;</span><br><span class="line">array.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;    <span class="comment">//排序后更加方便去重</span></span><br><span class="line"><span class="keyword">return</span> a,b;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index&gt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(array[index]===array[index-<span class="number">1</span>])&#123;</span><br><span class="line">array.splice(index,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">loop(index,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">loop(len-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr))</span><br><span class="line"><span class="comment">//[1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]</span></span><br></pre></td></tr></table></figure><h3 id="九、利用Map数据结构去重"><a href="#九、利用Map数据结构去重" class="headerlink" title="九、利用Map数据结构去重"></a>九、利用Map数据结构去重</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">let</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>();   <span class="comment">//数组用于返回结果</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; arr.length; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(map.has(arr[i]))&#123;    <span class="comment">//如果有该key值</span></span><br><span class="line">map.set(arr[i],<span class="literal">true</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> map.set(arr[i],<span class="literal">false</span>);     <span class="comment">//如果没有key值</span></span><br><span class="line"> array.push(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr))</span><br><span class="line"><span class="comment">//[1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]</span></span><br></pre></td></tr></table></figure><p><strong>创建一个空的Map数据结构，遍历需要去重的数组，把数组的每一个元素作为key存到Map中。由于Map中不会出现不同的key值，所以最终得到的结果就是去重后的结果。</strong></p><h3 id="十一、利用reduce-includes"><a href="#十一、利用reduce-includes" class="headerlink" title="十一、利用reduce+includes"></a>十一、利用reduce+includes</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">prev,cur</span>)=&gt;</span>prev,includes(cur)?prev:[...prev,cur],[]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr));</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span></span><br></pre></td></tr></table></figure><p>注：这些方法都是面试时候经常问到的JS问题应该多看啊<br>（end）</p>]]></content>
      
      
      <categories>
          
          <category> JavaSctipt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
